/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.simiacryptus.api.java.modelslab;

import com.fasterxml.jackson.core.type.TypeReference;

import com.simiacryptus.api.java.ApiException;
import com.simiacryptus.api.java.ApiClient;
import com.simiacryptus.api.java.Configuration;
import com.simiacryptus.api.java.Pair;

import com.simiacryptus.api.java.modelslab.model.CreateDreamboothRequest200Response;
import com.simiacryptus.api.java.modelslab.model.CreateDreamboothRequestRequest;
import com.simiacryptus.api.java.modelslab.model.FetchQueuedImagesRequest;
import com.simiacryptus.api.java.modelslab.model.GetTrainingStatus200Response;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class TrainModelSandboxApiApi {


  private ApiClient apiClient;

  public TrainModelSandboxApiApi() {
    this(Configuration.getDefaultApiClient());
  }

  public TrainModelSandboxApiApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Create Dreambooth Request
   * Create Dreambooth Request
   * @param createDreamboothRequestRequest  (optional)
   * @return CreateDreamboothRequest200Response
   * @throws ApiException if fails to make API call
   */
  public CreateDreamboothRequest200Response createDreamboothRequest1(CreateDreamboothRequestRequest createDreamboothRequestRequest) throws ApiException {
    return this.createDreamboothRequest1(createDreamboothRequestRequest, Collections.emptyMap());
  }


  /**
   * Create Dreambooth Request
   * Create Dreambooth Request
   * @param createDreamboothRequestRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return CreateDreamboothRequest200Response
   * @throws ApiException if fails to make API call
   */
  public CreateDreamboothRequest200Response createDreamboothRequest1(CreateDreamboothRequestRequest createDreamboothRequestRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createDreamboothRequestRequest;
    
    // create path and map variables
    String localVarPath = "/api/sandbox/v3/fine_tune";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<CreateDreamboothRequest200Response> localVarReturnType = new TypeReference<CreateDreamboothRequest200Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get Training Status
   * Get Training Status
   * @param fetchQueuedImagesRequest  (optional)
   * @return GetTrainingStatus200Response
   * @throws ApiException if fails to make API call
   */
  public GetTrainingStatus200Response getTrainingStatus1(FetchQueuedImagesRequest fetchQueuedImagesRequest) throws ApiException {
    return this.getTrainingStatus1(fetchQueuedImagesRequest, Collections.emptyMap());
  }


  /**
   * Get Training Status
   * Get Training Status
   * @param fetchQueuedImagesRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return GetTrainingStatus200Response
   * @throws ApiException if fails to make API call
   */
  public GetTrainingStatus200Response getTrainingStatus1(FetchQueuedImagesRequest fetchQueuedImagesRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = fetchQueuedImagesRequest;
    
    // create path and map variables
    String localVarPath = "/api/sandbox/v3/fine_tune_status/dyxjeiQ6kg";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetTrainingStatus200Response> localVarReturnType = new TypeReference<GetTrainingStatus200Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
