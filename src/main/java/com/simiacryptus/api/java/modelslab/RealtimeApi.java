/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.simiacryptus.api.java.modelslab;

import com.fasterxml.jackson.core.type.TypeReference;

import com.simiacryptus.api.java.ApiException;
import com.simiacryptus.api.java.ApiClient;
import com.simiacryptus.api.java.Configuration;
import com.simiacryptus.api.java.Pair;



import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class RealtimeApi {


  private ApiClient apiClient;

  public RealtimeApi() {
    this(Configuration.getDefaultApiClient());
  }

  public RealtimeApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Image to Image
   * Image to Image
   * @param guidanceScale  (optional)
   * @param height  (optional)
   * @param initImage  (optional)
   * @param key  (optional)
   * @param negativePrompt  (optional)
   * @param numInferenceSteps  (optional)
   * @param prompt  (optional)
   * @param samples  (optional)
   * @param strength  (optional)
   * @param width  (optional)
   * @throws ApiException if fails to make API call
   */
  public void imageToImage(String guidanceScale, String height, String initImage, String key, String negativePrompt, String numInferenceSteps, String prompt, String samples, String strength, String width) throws ApiException {
    this.imageToImage(guidanceScale, height, initImage, key, negativePrompt, numInferenceSteps, prompt, samples, strength, width, Collections.emptyMap());
  }


  /**
   * Image to Image
   * Image to Image
   * @param guidanceScale  (optional)
   * @param height  (optional)
   * @param initImage  (optional)
   * @param key  (optional)
   * @param negativePrompt  (optional)
   * @param numInferenceSteps  (optional)
   * @param prompt  (optional)
   * @param samples  (optional)
   * @param strength  (optional)
   * @param width  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void imageToImage(String guidanceScale, String height, String initImage, String key, String negativePrompt, String numInferenceSteps, String prompt, String samples, String strength, String width, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v6/realtime/img2img";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (guidanceScale != null)
      localVarFormParams.put("guidance_scale", guidanceScale);
if (height != null)
      localVarFormParams.put("height", height);
if (initImage != null)
      localVarFormParams.put("init_image", initImage);
if (key != null)
      localVarFormParams.put("key", key);
if (negativePrompt != null)
      localVarFormParams.put("negative_prompt", negativePrompt);
if (numInferenceSteps != null)
      localVarFormParams.put("num_inference_steps", numInferenceSteps);
if (prompt != null)
      localVarFormParams.put("prompt", prompt);
if (samples != null)
      localVarFormParams.put("samples", samples);
if (strength != null)
      localVarFormParams.put("strength", strength);
if (width != null)
      localVarFormParams.put("width", width);

    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Inpaint
   * Inpaint
   * @param guidanceScale  (optional)
   * @param height  (optional)
   * @param initImage  (optional)
   * @param key  (optional)
   * @param maskImage  (optional)
   * @param negativePrompt  (optional)
   * @param numInferenceSteps  (optional)
   * @param prompt  (optional)
   * @param samples  (optional)
   * @param strength  (optional)
   * @param width  (optional)
   * @throws ApiException if fails to make API call
   */
  public void inpaint(String guidanceScale, String height, String initImage, String key, String maskImage, String negativePrompt, String numInferenceSteps, String prompt, String samples, String strength, String width) throws ApiException {
    this.inpaint(guidanceScale, height, initImage, key, maskImage, negativePrompt, numInferenceSteps, prompt, samples, strength, width, Collections.emptyMap());
  }


  /**
   * Inpaint
   * Inpaint
   * @param guidanceScale  (optional)
   * @param height  (optional)
   * @param initImage  (optional)
   * @param key  (optional)
   * @param maskImage  (optional)
   * @param negativePrompt  (optional)
   * @param numInferenceSteps  (optional)
   * @param prompt  (optional)
   * @param samples  (optional)
   * @param strength  (optional)
   * @param width  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void inpaint(String guidanceScale, String height, String initImage, String key, String maskImage, String negativePrompt, String numInferenceSteps, String prompt, String samples, String strength, String width, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v6/realtime/inpaint";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (guidanceScale != null)
      localVarFormParams.put("guidance_scale", guidanceScale);
if (height != null)
      localVarFormParams.put("height", height);
if (initImage != null)
      localVarFormParams.put("init_image", initImage);
if (key != null)
      localVarFormParams.put("key", key);
if (maskImage != null)
      localVarFormParams.put("mask_image", maskImage);
if (negativePrompt != null)
      localVarFormParams.put("negative_prompt", negativePrompt);
if (numInferenceSteps != null)
      localVarFormParams.put("num_inference_steps", numInferenceSteps);
if (prompt != null)
      localVarFormParams.put("prompt", prompt);
if (samples != null)
      localVarFormParams.put("samples", samples);
if (strength != null)
      localVarFormParams.put("strength", strength);
if (width != null)
      localVarFormParams.put("width", width);

    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Text to Image
   * Text to Image
   * @param guidanceScale  (optional)
   * @param height  (optional)
   * @param key  (optional)
   * @param negativePrompt  (optional)
   * @param numInferenceSteps  (optional)
   * @param prompt  (optional)
   * @param samples  (optional)
   * @param width  (optional)
   * @throws ApiException if fails to make API call
   */
  public void textToImage(String guidanceScale, String height, String key, String negativePrompt, String numInferenceSteps, String prompt, String samples, String width) throws ApiException {
    this.textToImage(guidanceScale, height, key, negativePrompt, numInferenceSteps, prompt, samples, width, Collections.emptyMap());
  }


  /**
   * Text to Image
   * Text to Image
   * @param guidanceScale  (optional)
   * @param height  (optional)
   * @param key  (optional)
   * @param negativePrompt  (optional)
   * @param numInferenceSteps  (optional)
   * @param prompt  (optional)
   * @param samples  (optional)
   * @param width  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void textToImage(String guidanceScale, String height, String key, String negativePrompt, String numInferenceSteps, String prompt, String samples, String width, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/api/v6/realtime/text2img";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    if (guidanceScale != null)
      localVarFormParams.put("guidance_scale", guidanceScale);
if (height != null)
      localVarFormParams.put("height", height);
if (key != null)
      localVarFormParams.put("key", key);
if (negativePrompt != null)
      localVarFormParams.put("negative_prompt", negativePrompt);
if (numInferenceSteps != null)
      localVarFormParams.put("num_inference_steps", numInferenceSteps);
if (prompt != null)
      localVarFormParams.put("prompt", prompt);
if (samples != null)
      localVarFormParams.put("samples", samples);
if (width != null)
      localVarFormParams.put("width", width);

    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/x-www-form-urlencoded"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

}
