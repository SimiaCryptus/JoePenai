/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.simiacryptus.api.java.modelslab;

import com.fasterxml.jackson.core.type.TypeReference;

import com.simiacryptus.api.java.ApiException;
import com.simiacryptus.api.java.ApiClient;
import com.simiacryptus.api.java.Configuration;
import com.simiacryptus.api.java.Pair;

import com.simiacryptus.api.java.modelslab.model.BackgroundRemovalRequest;
import com.simiacryptus.api.java.modelslab.model.BlipDiffusionRequest;
import com.simiacryptus.api.java.modelslab.model.Depth2imgRequest;
import com.simiacryptus.api.java.modelslab.model.GroundedSegmentImageRequest;
import com.simiacryptus.api.java.modelslab.model.ImageMixerRequest;
import com.simiacryptus.api.java.modelslab.model.MagicMixRequest;
import com.simiacryptus.api.java.modelslab.model.MixtureCanvasRequest;
import com.simiacryptus.api.java.modelslab.model.OutpaintingRequest;
import com.simiacryptus.api.java.modelslab.model.SuperResolutionRequest;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class ImageEditingApiApi {


  private ApiClient apiClient;

  public ImageEditingApiApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ImageEditingApiApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Background Removal
   * Background Removal
   * @param backgroundRemovalRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void backgroundRemoval(BackgroundRemovalRequest backgroundRemovalRequest) throws ApiException {
    this.backgroundRemoval(backgroundRemovalRequest, Collections.emptyMap());
  }


  /**
   * Background Removal
   * Background Removal
   * @param backgroundRemovalRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void backgroundRemoval(BackgroundRemovalRequest backgroundRemovalRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = backgroundRemovalRequest;
    
    // create path and map variables
    String localVarPath = "/api/v5/removebg_mask";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Blip Diffusion
   * Blip Diffusion
   * @param blipDiffusionRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void blipDiffusion(BlipDiffusionRequest blipDiffusionRequest) throws ApiException {
    this.blipDiffusion(blipDiffusionRequest, Collections.emptyMap());
  }


  /**
   * Blip Diffusion
   * Blip Diffusion
   * @param blipDiffusionRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void blipDiffusion(BlipDiffusionRequest blipDiffusionRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = blipDiffusionRequest;
    
    // create path and map variables
    String localVarPath = "/api/v5/blip_diffusion";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Depth2Img
   * Depth2Img
   * @param depth2imgRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void depth2img(Depth2imgRequest depth2imgRequest) throws ApiException {
    this.depth2img(depth2imgRequest, Collections.emptyMap());
  }


  /**
   * Depth2Img
   * Depth2Img
   * @param depth2imgRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void depth2img(Depth2imgRequest depth2imgRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = depth2imgRequest;
    
    // create path and map variables
    String localVarPath = "/api/v5/depth2img";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Grounded Segment Image
   * Grounded Segment Image
   * @param groundedSegmentImageRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void groundedSegmentImage(GroundedSegmentImageRequest groundedSegmentImageRequest) throws ApiException {
    this.groundedSegmentImage(groundedSegmentImageRequest, Collections.emptyMap());
  }


  /**
   * Grounded Segment Image
   * Grounded Segment Image
   * @param groundedSegmentImageRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void groundedSegmentImage(GroundedSegmentImageRequest groundedSegmentImageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = groundedSegmentImageRequest;
    
    // create path and map variables
    String localVarPath = "/api/v5/ground_segment";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Image Mixer
   * Image Mixer
   * @param imageMixerRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void imageMixer(ImageMixerRequest imageMixerRequest) throws ApiException {
    this.imageMixer(imageMixerRequest, Collections.emptyMap());
  }


  /**
   * Image Mixer
   * Image Mixer
   * @param imageMixerRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void imageMixer(ImageMixerRequest imageMixerRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = imageMixerRequest;
    
    // create path and map variables
    String localVarPath = "/api/v3/img_mixer";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Magic Mix
   * Magic Mix
   * @param magicMixRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void magicMix(MagicMixRequest magicMixRequest) throws ApiException {
    this.magicMix(magicMixRequest, Collections.emptyMap());
  }


  /**
   * Magic Mix
   * Magic Mix
   * @param magicMixRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void magicMix(MagicMixRequest magicMixRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = magicMixRequest;
    
    // create path and map variables
    String localVarPath = "/api/v5/magic_mix";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Mixture Canvas
   * Mixture Canvas
   * @param mixtureCanvasRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void mixtureCanvas(MixtureCanvasRequest mixtureCanvasRequest) throws ApiException {
    this.mixtureCanvas(mixtureCanvasRequest, Collections.emptyMap());
  }


  /**
   * Mixture Canvas
   * Mixture Canvas
   * @param mixtureCanvasRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void mixtureCanvas(MixtureCanvasRequest mixtureCanvasRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = mixtureCanvasRequest;
    
    // create path and map variables
    String localVarPath = "/api/v5/mixture_canvas";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Outpainting
   * Outpainting
   * @param outpaintingRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void outpainting(OutpaintingRequest outpaintingRequest) throws ApiException {
    this.outpainting(outpaintingRequest, Collections.emptyMap());
  }


  /**
   * Outpainting
   * Outpainting
   * @param outpaintingRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void outpainting(OutpaintingRequest outpaintingRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = outpaintingRequest;
    
    // create path and map variables
    String localVarPath = "/api/v5/outpaint";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Super Resolution
   * Super Resolution
   * @param superResolutionRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void superResolution(SuperResolutionRequest superResolutionRequest) throws ApiException {
    this.superResolution(superResolutionRequest, Collections.emptyMap());
  }


  /**
   * Super Resolution
   * Super Resolution
   * @param superResolutionRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void superResolution(SuperResolutionRequest superResolutionRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = superResolutionRequest;
    
    // create path and map variables
    String localVarPath = "/api/v3/super_resolution";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

}
