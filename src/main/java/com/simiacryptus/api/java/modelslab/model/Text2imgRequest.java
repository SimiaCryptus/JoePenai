/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Text2imgRequest
 */
@JsonPropertyOrder({
  Text2imgRequest.JSON_PROPERTY_ALGORITHM_TYPE,
  Text2imgRequest.JSON_PROPERTY_CLIP_SKIP,
  Text2imgRequest.JSON_PROPERTY_EMBEDDINGS_MODEL,
  Text2imgRequest.JSON_PROPERTY_ENHANCE_PROMPT,
  Text2imgRequest.JSON_PROPERTY_FREE_U,
  Text2imgRequest.JSON_PROPERTY_GUIDANCE_SCALE,
  Text2imgRequest.JSON_PROPERTY_HEIGHT,
  Text2imgRequest.JSON_PROPERTY_KEY,
  Text2imgRequest.JSON_PROPERTY_LORA_MODEL,
  Text2imgRequest.JSON_PROPERTY_LORA_STRENGTH,
  Text2imgRequest.JSON_PROPERTY_MODEL_ID,
  Text2imgRequest.JSON_PROPERTY_MULTI_LINGUAL,
  Text2imgRequest.JSON_PROPERTY_NEGATIVE_PROMPT,
  Text2imgRequest.JSON_PROPERTY_NUM_INFERENCE_STEPS,
  Text2imgRequest.JSON_PROPERTY_PANORAMA,
  Text2imgRequest.JSON_PROPERTY_PROMPT,
  Text2imgRequest.JSON_PROPERTY_SAFETY_CHECKER,
  Text2imgRequest.JSON_PROPERTY_SAMPLES,
  Text2imgRequest.JSON_PROPERTY_SCHEDULER,
  Text2imgRequest.JSON_PROPERTY_SELF_ATTENTION,
  Text2imgRequest.JSON_PROPERTY_TOMESD,
  Text2imgRequest.JSON_PROPERTY_TRACK_ID,
  Text2imgRequest.JSON_PROPERTY_UPSCALE,
  Text2imgRequest.JSON_PROPERTY_USE_KARRAS_SIGMAS,
  Text2imgRequest.JSON_PROPERTY_VAE,
  Text2imgRequest.JSON_PROPERTY_WEBHOOK,
  Text2imgRequest.JSON_PROPERTY_WIDTH
})
@JsonTypeName("text2img_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class Text2imgRequest {
  public static final String JSON_PROPERTY_ALGORITHM_TYPE = "algorithm_type";
  private String algorithmType;

  public static final String JSON_PROPERTY_CLIP_SKIP = "clip_skip";
  private BigDecimal clipSkip;

  public static final String JSON_PROPERTY_EMBEDDINGS_MODEL = "embeddings_model";
  private JsonNullable<Object> embeddingsModel = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_ENHANCE_PROMPT = "enhance_prompt";
  private String enhancePrompt;

  public static final String JSON_PROPERTY_FREE_U = "free_u";
  private String freeU;

  public static final String JSON_PROPERTY_GUIDANCE_SCALE = "guidance_scale";
  private BigDecimal guidanceScale;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  private BigDecimal height;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_LORA_MODEL = "lora_model";
  private JsonNullable<Object> loraModel = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_LORA_STRENGTH = "lora_strength";
  private JsonNullable<Object> loraStrength = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MODEL_ID = "model_id";
  private String modelId;

  public static final String JSON_PROPERTY_MULTI_LINGUAL = "multi_lingual";
  private String multiLingual;

  public static final String JSON_PROPERTY_NEGATIVE_PROMPT = "negative_prompt";
  private String negativePrompt;

  public static final String JSON_PROPERTY_NUM_INFERENCE_STEPS = "num_inference_steps";
  private BigDecimal numInferenceSteps;

  public static final String JSON_PROPERTY_PANORAMA = "panorama";
  private String panorama;

  public static final String JSON_PROPERTY_PROMPT = "prompt";
  private String prompt;

  public static final String JSON_PROPERTY_SAFETY_CHECKER = "safety_checker";
  private String safetyChecker;

  public static final String JSON_PROPERTY_SAMPLES = "samples";
  private BigDecimal samples;

  public static final String JSON_PROPERTY_SCHEDULER = "scheduler";
  private String scheduler;

  public static final String JSON_PROPERTY_SELF_ATTENTION = "self_attention";
  private String selfAttention;

  public static final String JSON_PROPERTY_TOMESD = "tomesd";
  private String tomesd;

  public static final String JSON_PROPERTY_TRACK_ID = "track_id";
  private JsonNullable<Object> trackId = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_UPSCALE = "upscale";
  private BigDecimal upscale;

  public static final String JSON_PROPERTY_USE_KARRAS_SIGMAS = "use_karras_sigmas";
  private Boolean useKarrasSigmas;

  public static final String JSON_PROPERTY_VAE = "vae";
  private JsonNullable<Object> vae = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_WEBHOOK = "webhook";
  private JsonNullable<Object> webhook = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_WIDTH = "width";
  private BigDecimal width;

  public Text2imgRequest() {
  }

  public Text2imgRequest algorithmType(String algorithmType) {
    
    this.algorithmType = algorithmType;
    return this;
  }

   /**
   * Get algorithmType
   * @return algorithmType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALGORITHM_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlgorithmType() {
    return algorithmType;
  }


  @JsonProperty(JSON_PROPERTY_ALGORITHM_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlgorithmType(String algorithmType) {
    this.algorithmType = algorithmType;
  }


  public Text2imgRequest clipSkip(BigDecimal clipSkip) {
    
    this.clipSkip = clipSkip;
    return this;
  }

   /**
   * Get clipSkip
   * @return clipSkip
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLIP_SKIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getClipSkip() {
    return clipSkip;
  }


  @JsonProperty(JSON_PROPERTY_CLIP_SKIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClipSkip(BigDecimal clipSkip) {
    this.clipSkip = clipSkip;
  }


  public Text2imgRequest embeddingsModel(Object embeddingsModel) {
    this.embeddingsModel = JsonNullable.<Object>of(embeddingsModel);
    
    return this;
  }

   /**
   * Get embeddingsModel
   * @return embeddingsModel
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getEmbeddingsModel() {
        return embeddingsModel.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EMBEDDINGS_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getEmbeddingsModel_JsonNullable() {
    return embeddingsModel;
  }
  
  @JsonProperty(JSON_PROPERTY_EMBEDDINGS_MODEL)
  public void setEmbeddingsModel_JsonNullable(JsonNullable<Object> embeddingsModel) {
    this.embeddingsModel = embeddingsModel;
  }

  public void setEmbeddingsModel(Object embeddingsModel) {
    this.embeddingsModel = JsonNullable.<Object>of(embeddingsModel);
  }


  public Text2imgRequest enhancePrompt(String enhancePrompt) {
    
    this.enhancePrompt = enhancePrompt;
    return this;
  }

   /**
   * Get enhancePrompt
   * @return enhancePrompt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENHANCE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEnhancePrompt() {
    return enhancePrompt;
  }


  @JsonProperty(JSON_PROPERTY_ENHANCE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnhancePrompt(String enhancePrompt) {
    this.enhancePrompt = enhancePrompt;
  }


  public Text2imgRequest freeU(String freeU) {
    
    this.freeU = freeU;
    return this;
  }

   /**
   * Get freeU
   * @return freeU
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FREE_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFreeU() {
    return freeU;
  }


  @JsonProperty(JSON_PROPERTY_FREE_U)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFreeU(String freeU) {
    this.freeU = freeU;
  }


  public Text2imgRequest guidanceScale(BigDecimal guidanceScale) {
    
    this.guidanceScale = guidanceScale;
    return this;
  }

   /**
   * Get guidanceScale
   * @return guidanceScale
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GUIDANCE_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGuidanceScale() {
    return guidanceScale;
  }


  @JsonProperty(JSON_PROPERTY_GUIDANCE_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGuidanceScale(BigDecimal guidanceScale) {
    this.guidanceScale = guidanceScale;
  }


  public Text2imgRequest height(BigDecimal height) {
    
    this.height = height;
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public Text2imgRequest key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public Text2imgRequest loraModel(Object loraModel) {
    this.loraModel = JsonNullable.<Object>of(loraModel);
    
    return this;
  }

   /**
   * Get loraModel
   * @return loraModel
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getLoraModel() {
        return loraModel.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LORA_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getLoraModel_JsonNullable() {
    return loraModel;
  }
  
  @JsonProperty(JSON_PROPERTY_LORA_MODEL)
  public void setLoraModel_JsonNullable(JsonNullable<Object> loraModel) {
    this.loraModel = loraModel;
  }

  public void setLoraModel(Object loraModel) {
    this.loraModel = JsonNullable.<Object>of(loraModel);
  }


  public Text2imgRequest loraStrength(Object loraStrength) {
    this.loraStrength = JsonNullable.<Object>of(loraStrength);
    
    return this;
  }

   /**
   * Get loraStrength
   * @return loraStrength
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getLoraStrength() {
        return loraStrength.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LORA_STRENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getLoraStrength_JsonNullable() {
    return loraStrength;
  }
  
  @JsonProperty(JSON_PROPERTY_LORA_STRENGTH)
  public void setLoraStrength_JsonNullable(JsonNullable<Object> loraStrength) {
    this.loraStrength = loraStrength;
  }

  public void setLoraStrength(Object loraStrength) {
    this.loraStrength = JsonNullable.<Object>of(loraStrength);
  }


  public Text2imgRequest modelId(String modelId) {
    
    this.modelId = modelId;
    return this;
  }

   /**
   * Get modelId
   * @return modelId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModelId() {
    return modelId;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public Text2imgRequest multiLingual(String multiLingual) {
    
    this.multiLingual = multiLingual;
    return this;
  }

   /**
   * Get multiLingual
   * @return multiLingual
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MULTI_LINGUAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMultiLingual() {
    return multiLingual;
  }


  @JsonProperty(JSON_PROPERTY_MULTI_LINGUAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMultiLingual(String multiLingual) {
    this.multiLingual = multiLingual;
  }


  public Text2imgRequest negativePrompt(String negativePrompt) {
    
    this.negativePrompt = negativePrompt;
    return this;
  }

   /**
   * Get negativePrompt
   * @return negativePrompt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEGATIVE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNegativePrompt() {
    return negativePrompt;
  }


  @JsonProperty(JSON_PROPERTY_NEGATIVE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegativePrompt(String negativePrompt) {
    this.negativePrompt = negativePrompt;
  }


  public Text2imgRequest numInferenceSteps(BigDecimal numInferenceSteps) {
    
    this.numInferenceSteps = numInferenceSteps;
    return this;
  }

   /**
   * Get numInferenceSteps
   * @return numInferenceSteps
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_INFERENCE_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNumInferenceSteps() {
    return numInferenceSteps;
  }


  @JsonProperty(JSON_PROPERTY_NUM_INFERENCE_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumInferenceSteps(BigDecimal numInferenceSteps) {
    this.numInferenceSteps = numInferenceSteps;
  }


  public Text2imgRequest panorama(String panorama) {
    
    this.panorama = panorama;
    return this;
  }

   /**
   * Get panorama
   * @return panorama
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PANORAMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPanorama() {
    return panorama;
  }


  @JsonProperty(JSON_PROPERTY_PANORAMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPanorama(String panorama) {
    this.panorama = panorama;
  }


  public Text2imgRequest prompt(String prompt) {
    
    this.prompt = prompt;
    return this;
  }

   /**
   * Get prompt
   * @return prompt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrompt() {
    return prompt;
  }


  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }


  public Text2imgRequest safetyChecker(String safetyChecker) {
    
    this.safetyChecker = safetyChecker;
    return this;
  }

   /**
   * Get safetyChecker
   * @return safetyChecker
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAFETY_CHECKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSafetyChecker() {
    return safetyChecker;
  }


  @JsonProperty(JSON_PROPERTY_SAFETY_CHECKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSafetyChecker(String safetyChecker) {
    this.safetyChecker = safetyChecker;
  }


  public Text2imgRequest samples(BigDecimal samples) {
    
    this.samples = samples;
    return this;
  }

   /**
   * Get samples
   * @return samples
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSamples() {
    return samples;
  }


  @JsonProperty(JSON_PROPERTY_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSamples(BigDecimal samples) {
    this.samples = samples;
  }


  public Text2imgRequest scheduler(String scheduler) {
    
    this.scheduler = scheduler;
    return this;
  }

   /**
   * Get scheduler
   * @return scheduler
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEDULER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScheduler() {
    return scheduler;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScheduler(String scheduler) {
    this.scheduler = scheduler;
  }


  public Text2imgRequest selfAttention(String selfAttention) {
    
    this.selfAttention = selfAttention;
    return this;
  }

   /**
   * Get selfAttention
   * @return selfAttention
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELF_ATTENTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSelfAttention() {
    return selfAttention;
  }


  @JsonProperty(JSON_PROPERTY_SELF_ATTENTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelfAttention(String selfAttention) {
    this.selfAttention = selfAttention;
  }


  public Text2imgRequest tomesd(String tomesd) {
    
    this.tomesd = tomesd;
    return this;
  }

   /**
   * Get tomesd
   * @return tomesd
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOMESD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTomesd() {
    return tomesd;
  }


  @JsonProperty(JSON_PROPERTY_TOMESD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTomesd(String tomesd) {
    this.tomesd = tomesd;
  }


  public Text2imgRequest trackId(Object trackId) {
    this.trackId = JsonNullable.<Object>of(trackId);
    
    return this;
  }

   /**
   * Get trackId
   * @return trackId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getTrackId() {
        return trackId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRACK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getTrackId_JsonNullable() {
    return trackId;
  }
  
  @JsonProperty(JSON_PROPERTY_TRACK_ID)
  public void setTrackId_JsonNullable(JsonNullable<Object> trackId) {
    this.trackId = trackId;
  }

  public void setTrackId(Object trackId) {
    this.trackId = JsonNullable.<Object>of(trackId);
  }


  public Text2imgRequest upscale(BigDecimal upscale) {
    
    this.upscale = upscale;
    return this;
  }

   /**
   * Get upscale
   * @return upscale
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPSCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getUpscale() {
    return upscale;
  }


  @JsonProperty(JSON_PROPERTY_UPSCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpscale(BigDecimal upscale) {
    this.upscale = upscale;
  }


  public Text2imgRequest useKarrasSigmas(Boolean useKarrasSigmas) {
    
    this.useKarrasSigmas = useKarrasSigmas;
    return this;
  }

   /**
   * Get useKarrasSigmas
   * @return useKarrasSigmas
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_KARRAS_SIGMAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseKarrasSigmas() {
    return useKarrasSigmas;
  }


  @JsonProperty(JSON_PROPERTY_USE_KARRAS_SIGMAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseKarrasSigmas(Boolean useKarrasSigmas) {
    this.useKarrasSigmas = useKarrasSigmas;
  }


  public Text2imgRequest vae(Object vae) {
    this.vae = JsonNullable.<Object>of(vae);
    
    return this;
  }

   /**
   * Get vae
   * @return vae
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getVae() {
        return vae.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VAE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getVae_JsonNullable() {
    return vae;
  }
  
  @JsonProperty(JSON_PROPERTY_VAE)
  public void setVae_JsonNullable(JsonNullable<Object> vae) {
    this.vae = vae;
  }

  public void setVae(Object vae) {
    this.vae = JsonNullable.<Object>of(vae);
  }


  public Text2imgRequest webhook(Object webhook) {
    this.webhook = JsonNullable.<Object>of(webhook);
    
    return this;
  }

   /**
   * Get webhook
   * @return webhook
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getWebhook() {
        return webhook.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WEBHOOK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getWebhook_JsonNullable() {
    return webhook;
  }
  
  @JsonProperty(JSON_PROPERTY_WEBHOOK)
  public void setWebhook_JsonNullable(JsonNullable<Object> webhook) {
    this.webhook = webhook;
  }

  public void setWebhook(Object webhook) {
    this.webhook = JsonNullable.<Object>of(webhook);
  }


  public Text2imgRequest width(BigDecimal width) {
    
    this.width = width;
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(BigDecimal width) {
    this.width = width;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Text2imgRequest text2imgRequest = (Text2imgRequest) o;
    return Objects.equals(this.algorithmType, text2imgRequest.algorithmType) &&
        Objects.equals(this.clipSkip, text2imgRequest.clipSkip) &&
        equalsNullable(this.embeddingsModel, text2imgRequest.embeddingsModel) &&
        Objects.equals(this.enhancePrompt, text2imgRequest.enhancePrompt) &&
        Objects.equals(this.freeU, text2imgRequest.freeU) &&
        Objects.equals(this.guidanceScale, text2imgRequest.guidanceScale) &&
        Objects.equals(this.height, text2imgRequest.height) &&
        Objects.equals(this.key, text2imgRequest.key) &&
        equalsNullable(this.loraModel, text2imgRequest.loraModel) &&
        equalsNullable(this.loraStrength, text2imgRequest.loraStrength) &&
        Objects.equals(this.modelId, text2imgRequest.modelId) &&
        Objects.equals(this.multiLingual, text2imgRequest.multiLingual) &&
        Objects.equals(this.negativePrompt, text2imgRequest.negativePrompt) &&
        Objects.equals(this.numInferenceSteps, text2imgRequest.numInferenceSteps) &&
        Objects.equals(this.panorama, text2imgRequest.panorama) &&
        Objects.equals(this.prompt, text2imgRequest.prompt) &&
        Objects.equals(this.safetyChecker, text2imgRequest.safetyChecker) &&
        Objects.equals(this.samples, text2imgRequest.samples) &&
        Objects.equals(this.scheduler, text2imgRequest.scheduler) &&
        Objects.equals(this.selfAttention, text2imgRequest.selfAttention) &&
        Objects.equals(this.tomesd, text2imgRequest.tomesd) &&
        equalsNullable(this.trackId, text2imgRequest.trackId) &&
        Objects.equals(this.upscale, text2imgRequest.upscale) &&
        Objects.equals(this.useKarrasSigmas, text2imgRequest.useKarrasSigmas) &&
        equalsNullable(this.vae, text2imgRequest.vae) &&
        equalsNullable(this.webhook, text2imgRequest.webhook) &&
        Objects.equals(this.width, text2imgRequest.width);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(algorithmType, clipSkip, hashCodeNullable(embeddingsModel), enhancePrompt, freeU, guidanceScale, height, key, hashCodeNullable(loraModel), hashCodeNullable(loraStrength), modelId, multiLingual, negativePrompt, numInferenceSteps, panorama, prompt, safetyChecker, samples, scheduler, selfAttention, tomesd, hashCodeNullable(trackId), upscale, useKarrasSigmas, hashCodeNullable(vae), hashCodeNullable(webhook), width);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Text2imgRequest {\n");
    sb.append("    algorithmType: ").append(toIndentedString(algorithmType)).append("\n");
    sb.append("    clipSkip: ").append(toIndentedString(clipSkip)).append("\n");
    sb.append("    embeddingsModel: ").append(toIndentedString(embeddingsModel)).append("\n");
    sb.append("    enhancePrompt: ").append(toIndentedString(enhancePrompt)).append("\n");
    sb.append("    freeU: ").append(toIndentedString(freeU)).append("\n");
    sb.append("    guidanceScale: ").append(toIndentedString(guidanceScale)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    loraModel: ").append(toIndentedString(loraModel)).append("\n");
    sb.append("    loraStrength: ").append(toIndentedString(loraStrength)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    multiLingual: ").append(toIndentedString(multiLingual)).append("\n");
    sb.append("    negativePrompt: ").append(toIndentedString(negativePrompt)).append("\n");
    sb.append("    numInferenceSteps: ").append(toIndentedString(numInferenceSteps)).append("\n");
    sb.append("    panorama: ").append(toIndentedString(panorama)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    safetyChecker: ").append(toIndentedString(safetyChecker)).append("\n");
    sb.append("    samples: ").append(toIndentedString(samples)).append("\n");
    sb.append("    scheduler: ").append(toIndentedString(scheduler)).append("\n");
    sb.append("    selfAttention: ").append(toIndentedString(selfAttention)).append("\n");
    sb.append("    tomesd: ").append(toIndentedString(tomesd)).append("\n");
    sb.append("    trackId: ").append(toIndentedString(trackId)).append("\n");
    sb.append("    upscale: ").append(toIndentedString(upscale)).append("\n");
    sb.append("    useKarrasSigmas: ").append(toIndentedString(useKarrasSigmas)).append("\n");
    sb.append("    vae: ").append(toIndentedString(vae)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `algorithm_type` to the URL query string
    if (getAlgorithmType() != null) {
      try {
        joiner.add(String.format("%salgorithm_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlgorithmType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `clip_skip` to the URL query string
    if (getClipSkip() != null) {
      try {
        joiner.add(String.format("%sclip_skip%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClipSkip()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `embeddings_model` to the URL query string
    if (getEmbeddingsModel() != null) {
      try {
        joiner.add(String.format("%sembeddings_model%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEmbeddingsModel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `enhance_prompt` to the URL query string
    if (getEnhancePrompt() != null) {
      try {
        joiner.add(String.format("%senhance_prompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnhancePrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `free_u` to the URL query string
    if (getFreeU() != null) {
      try {
        joiner.add(String.format("%sfree_u%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFreeU()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `guidance_scale` to the URL query string
    if (getGuidanceScale() != null) {
      try {
        joiner.add(String.format("%sguidance_scale%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGuidanceScale()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `height` to the URL query string
    if (getHeight() != null) {
      try {
        joiner.add(String.format("%sheight%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeight()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `key` to the URL query string
    if (getKey() != null) {
      try {
        joiner.add(String.format("%skey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `lora_model` to the URL query string
    if (getLoraModel() != null) {
      try {
        joiner.add(String.format("%slora_model%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLoraModel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `lora_strength` to the URL query string
    if (getLoraStrength() != null) {
      try {
        joiner.add(String.format("%slora_strength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLoraStrength()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `model_id` to the URL query string
    if (getModelId() != null) {
      try {
        joiner.add(String.format("%smodel_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModelId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `multi_lingual` to the URL query string
    if (getMultiLingual() != null) {
      try {
        joiner.add(String.format("%smulti_lingual%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMultiLingual()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `negative_prompt` to the URL query string
    if (getNegativePrompt() != null) {
      try {
        joiner.add(String.format("%snegative_prompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNegativePrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `num_inference_steps` to the URL query string
    if (getNumInferenceSteps() != null) {
      try {
        joiner.add(String.format("%snum_inference_steps%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumInferenceSteps()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `panorama` to the URL query string
    if (getPanorama() != null) {
      try {
        joiner.add(String.format("%spanorama%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPanorama()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `prompt` to the URL query string
    if (getPrompt() != null) {
      try {
        joiner.add(String.format("%sprompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `safety_checker` to the URL query string
    if (getSafetyChecker() != null) {
      try {
        joiner.add(String.format("%ssafety_checker%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSafetyChecker()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `samples` to the URL query string
    if (getSamples() != null) {
      try {
        joiner.add(String.format("%ssamples%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSamples()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `scheduler` to the URL query string
    if (getScheduler() != null) {
      try {
        joiner.add(String.format("%sscheduler%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScheduler()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `self_attention` to the URL query string
    if (getSelfAttention() != null) {
      try {
        joiner.add(String.format("%sself_attention%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSelfAttention()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tomesd` to the URL query string
    if (getTomesd() != null) {
      try {
        joiner.add(String.format("%stomesd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTomesd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `track_id` to the URL query string
    if (getTrackId() != null) {
      try {
        joiner.add(String.format("%strack_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTrackId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `upscale` to the URL query string
    if (getUpscale() != null) {
      try {
        joiner.add(String.format("%supscale%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpscale()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `use_karras_sigmas` to the URL query string
    if (getUseKarrasSigmas() != null) {
      try {
        joiner.add(String.format("%suse_karras_sigmas%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUseKarrasSigmas()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `vae` to the URL query string
    if (getVae() != null) {
      try {
        joiner.add(String.format("%svae%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVae()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `webhook` to the URL query string
    if (getWebhook() != null) {
      try {
        joiner.add(String.format("%swebhook%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWebhook()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `width` to the URL query string
    if (getWidth() != null) {
      try {
        joiner.add(String.format("%swidth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWidth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

