/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.simiacryptus.api.java.modelslab;

import com.fasterxml.jackson.core.type.TypeReference;

import com.simiacryptus.api.java.ApiException;
import com.simiacryptus.api.java.ApiClient;
import com.simiacryptus.api.java.Configuration;
import com.simiacryptus.api.java.Pair;

import com.simiacryptus.api.java.modelslab.model.CheckNsfwImagesRequest;
import com.simiacryptus.api.java.modelslab.model.ControlnetRequest;
import com.simiacryptus.api.java.modelslab.model.FetchImageRequest;
import com.simiacryptus.api.java.modelslab.model.GetAllModels200Response;
import com.simiacryptus.api.java.modelslab.model.GetAllModelsRequest;
import com.simiacryptus.api.java.modelslab.model.Img2imgRequest;
import com.simiacryptus.api.java.modelslab.model.Inpainting1Request;
import com.simiacryptus.api.java.modelslab.model.LoadModels200Response;
import com.simiacryptus.api.java.modelslab.model.LoadModelsRequest;
import com.simiacryptus.api.java.modelslab.model.LoadVaeRequest;
import com.simiacryptus.api.java.modelslab.model.RestartServer200Response;
import com.simiacryptus.api.java.modelslab.model.SuperResolution1Request;
import com.simiacryptus.api.java.modelslab.model.SyncModelsRequest;
import com.simiacryptus.api.java.modelslab.model.SystemDetails200Response;
import com.simiacryptus.api.java.modelslab.model.SystemDetailsRequest;
import com.simiacryptus.api.java.modelslab.model.Text2VideoRequest;
import com.simiacryptus.api.java.modelslab.model.Text2imgRequest;
import com.simiacryptus.api.java.modelslab.model.UploadImageRequest;
import com.simiacryptus.api.java.modelslab.model.VerifyModel200Response;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class EnterpriseApiApi {


  private ApiClient apiClient;

  public EnterpriseApiApi() {
    this(Configuration.getDefaultApiClient());
  }

  public EnterpriseApiApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Check NSFW Images
   * Check NSFW Images
   * @param checkNsfwImagesRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void checkNsfwImages(CheckNsfwImagesRequest checkNsfwImagesRequest) throws ApiException {
    this.checkNsfwImages(checkNsfwImagesRequest, Collections.emptyMap());
  }


  /**
   * Check NSFW Images
   * Check NSFW Images
   * @param checkNsfwImagesRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void checkNsfwImages(CheckNsfwImagesRequest checkNsfwImagesRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = checkNsfwImagesRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/nsfw_image_check";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Clear Cache
   * Clear Cache
   * @param systemDetailsRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void clearCache(SystemDetailsRequest systemDetailsRequest) throws ApiException {
    this.clearCache(systemDetailsRequest, Collections.emptyMap());
  }


  /**
   * Clear Cache
   * Clear Cache
   * @param systemDetailsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void clearCache(SystemDetailsRequest systemDetailsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = systemDetailsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/clear_cache";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Controlnet
   * Controlnet
   * @param controlnetRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void controlnet(ControlnetRequest controlnetRequest) throws ApiException {
    this.controlnet(controlnetRequest, Collections.emptyMap());
  }


  /**
   * Controlnet
   * Controlnet
   * @param controlnetRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void controlnet(ControlnetRequest controlnetRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = controlnetRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/controlnet";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Delete Model
   * Delete model on your server
   * @param systemDetailsRequest  (optional)
   * @return VerifyModel200Response
   * @throws ApiException if fails to make API call
   */
  public VerifyModel200Response deleteModel(SystemDetailsRequest systemDetailsRequest) throws ApiException {
    return this.deleteModel(systemDetailsRequest, Collections.emptyMap());
  }


  /**
   * Delete Model
   * Delete model on your server
   * @param systemDetailsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VerifyModel200Response
   * @throws ApiException if fails to make API call
   */
  public VerifyModel200Response deleteModel(SystemDetailsRequest systemDetailsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = systemDetailsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/delete_model";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<VerifyModel200Response> localVarReturnType = new TypeReference<VerifyModel200Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Fetch Image
   * Fetch Image
   * @param fetchImageRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void fetchImage(FetchImageRequest fetchImageRequest) throws ApiException {
    this.fetchImage(fetchImageRequest, Collections.emptyMap());
  }


  /**
   * Fetch Image
   * Fetch Image
   * @param fetchImageRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void fetchImage(FetchImageRequest fetchImageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = fetchImageRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/fetch";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Get all models
   * Get list of all models on your server
   * @param getAllModelsRequest  (optional)
   * @return GetAllModels200Response
   * @throws ApiException if fails to make API call
   */
  public GetAllModels200Response getAllModels(GetAllModelsRequest getAllModelsRequest) throws ApiException {
    return this.getAllModels(getAllModelsRequest, Collections.emptyMap());
  }


  /**
   * Get all models
   * Get list of all models on your server
   * @param getAllModelsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return GetAllModels200Response
   * @throws ApiException if fails to make API call
   */
  public GetAllModels200Response getAllModels(GetAllModelsRequest getAllModelsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = getAllModelsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/get_all_models";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<GetAllModels200Response> localVarReturnType = new TypeReference<GetAllModels200Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get list of Schedulers
   * Get list of Schedulers
   * @param systemDetailsRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void getListOfSchedulers(SystemDetailsRequest systemDetailsRequest) throws ApiException {
    this.getListOfSchedulers(systemDetailsRequest, Collections.emptyMap());
  }


  /**
   * Get list of Schedulers
   * Get list of Schedulers
   * @param systemDetailsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void getListOfSchedulers(SystemDetailsRequest systemDetailsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = systemDetailsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/schedulers_list";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Img2Img
   * Img2Img
   * @param img2imgRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void img2img(Img2imgRequest img2imgRequest) throws ApiException {
    this.img2img(img2imgRequest, Collections.emptyMap());
  }


  /**
   * Img2Img
   * Img2Img
   * @param img2imgRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void img2img(Img2imgRequest img2imgRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = img2imgRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/img2img";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Inpainting
   * Inpainting
   * @param inpainting1Request  (optional)
   * @throws ApiException if fails to make API call
   */
  public void inpainting1(Inpainting1Request inpainting1Request) throws ApiException {
    this.inpainting1(inpainting1Request, Collections.emptyMap());
  }


  /**
   * Inpainting
   * Inpainting
   * @param inpainting1Request  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void inpainting1(Inpainting1Request inpainting1Request, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = inpainting1Request;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/inpaint";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Load Models
   * Load model to your dedicated server,  1. **url** : url of huggingface model, .ckpt download link, or trained model from our dreambooth api 2. **model_id** : this is model_id model will be saved as, you can load model using this id to generate images. 3. **model_type**: &#x60;1. \&quot;huggingface\&quot; 2. \&quot;api_trained\&quot; 3. \&quot;custom_ckpt\&quot;&#x60; 4. **revision :** if model is &#x60;\&quot;fp16\&quot; or \&quot;fp32\&quot;&#x60; 5. **webhook** : webhook to receive response on model load events 6. **upcast_attention** : pass \&quot;yes\&quot; only when you are loading stable diffusion 2.1 model
   * @param loadModelsRequest  (optional)
   * @return LoadModels200Response
   * @throws ApiException if fails to make API call
   */
  public LoadModels200Response loadModels(LoadModelsRequest loadModelsRequest) throws ApiException {
    return this.loadModels(loadModelsRequest, Collections.emptyMap());
  }


  /**
   * Load Models
   * Load model to your dedicated server,  1. **url** : url of huggingface model, .ckpt download link, or trained model from our dreambooth api 2. **model_id** : this is model_id model will be saved as, you can load model using this id to generate images. 3. **model_type**: &#x60;1. \&quot;huggingface\&quot; 2. \&quot;api_trained\&quot; 3. \&quot;custom_ckpt\&quot;&#x60; 4. **revision :** if model is &#x60;\&quot;fp16\&quot; or \&quot;fp32\&quot;&#x60; 5. **webhook** : webhook to receive response on model load events 6. **upcast_attention** : pass \&quot;yes\&quot; only when you are loading stable diffusion 2.1 model
   * @param loadModelsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return LoadModels200Response
   * @throws ApiException if fails to make API call
   */
  public LoadModels200Response loadModels(LoadModelsRequest loadModelsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = loadModelsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/load_model";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<LoadModels200Response> localVarReturnType = new TypeReference<LoadModels200Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Load Vae
   * Load Vae
   * @param loadVaeRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void loadVae(LoadVaeRequest loadVaeRequest) throws ApiException {
    this.loadVae(loadVaeRequest, Collections.emptyMap());
  }


  /**
   * Load Vae
   * Load Vae
   * @param loadVaeRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void loadVae(LoadVaeRequest loadVaeRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = loadVaeRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/load_vae";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Restart Server
   * Restart your dedicated server
   * @param systemDetailsRequest  (optional)
   * @return RestartServer200Response
   * @throws ApiException if fails to make API call
   */
  public RestartServer200Response restartServer(SystemDetailsRequest systemDetailsRequest) throws ApiException {
    return this.restartServer(systemDetailsRequest, Collections.emptyMap());
  }


  /**
   * Restart Server
   * Restart your dedicated server
   * @param systemDetailsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return RestartServer200Response
   * @throws ApiException if fails to make API call
   */
  public RestartServer200Response restartServer(SystemDetailsRequest systemDetailsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = systemDetailsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/restart_server";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<RestartServer200Response> localVarReturnType = new TypeReference<RestartServer200Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Super Resolution
   * Super Resolution
   * @param superResolution1Request  (optional)
   * @throws ApiException if fails to make API call
   */
  public void superResolution1(SuperResolution1Request superResolution1Request) throws ApiException {
    this.superResolution1(superResolution1Request, Collections.emptyMap());
  }


  /**
   * Super Resolution
   * Super Resolution
   * @param superResolution1Request  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void superResolution1(SuperResolution1Request superResolution1Request, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = superResolution1Request;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/super_resolution";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Sync Models
   * Sync Models
   * @param syncModelsRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void syncModels(SyncModelsRequest syncModelsRequest) throws ApiException {
    this.syncModels(syncModelsRequest, Collections.emptyMap());
  }


  /**
   * Sync Models
   * Sync Models
   * @param syncModelsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void syncModels(SyncModelsRequest syncModelsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = syncModelsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/sync_models";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * System Details
   * Get details of your server
   * @param systemDetailsRequest  (optional)
   * @return SystemDetails200Response
   * @throws ApiException if fails to make API call
   */
  public SystemDetails200Response systemDetails(SystemDetailsRequest systemDetailsRequest) throws ApiException {
    return this.systemDetails(systemDetailsRequest, Collections.emptyMap());
  }


  /**
   * System Details
   * Get details of your server
   * @param systemDetailsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return SystemDetails200Response
   * @throws ApiException if fails to make API call
   */
  public SystemDetails200Response systemDetails(SystemDetailsRequest systemDetailsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = systemDetailsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/system_details";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<SystemDetails200Response> localVarReturnType = new TypeReference<SystemDetails200Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Text 2 Video
   * Text 2 Video
   * @param text2VideoRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void text2Video(Text2VideoRequest text2VideoRequest) throws ApiException {
    this.text2Video(text2VideoRequest, Collections.emptyMap());
  }


  /**
   * Text 2 Video
   * Text 2 Video
   * @param text2VideoRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void text2Video(Text2VideoRequest text2VideoRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = text2VideoRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/text2video";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Text2Img
   * Text2Img
   * @param text2imgRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void text2img(Text2imgRequest text2imgRequest) throws ApiException {
    this.text2img(text2imgRequest, Collections.emptyMap());
  }


  /**
   * Text2Img
   * Text2Img
   * @param text2imgRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void text2img(Text2imgRequest text2imgRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = text2imgRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/text2img";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Update S3 Details
   * Update S3 details on server,  You need to pass below parameters to update S3 details  1. public_url : public url on which images can be accessiable, and make \&quot;generations\&quot; directory in it and append it, 2. region_name : S3 region name 3. endpoint_url : S3 endpoint URL 4. aws_access_key_id : your aws accesskey 5. aws_secret_access_key : secret key 6. image_directory: image directory inside s3 bucket where images will be stoed, make \&quot;generations\&quot; directory inside buckey and make sure its public, so you can access images using links
   * @param systemDetailsRequest  (optional)
   * @return VerifyModel200Response
   * @throws ApiException if fails to make API call
   */
  public VerifyModel200Response updateS3Details(SystemDetailsRequest systemDetailsRequest) throws ApiException {
    return this.updateS3Details(systemDetailsRequest, Collections.emptyMap());
  }


  /**
   * Update S3 Details
   * Update S3 details on server,  You need to pass below parameters to update S3 details  1. public_url : public url on which images can be accessiable, and make \&quot;generations\&quot; directory in it and append it, 2. region_name : S3 region name 3. endpoint_url : S3 endpoint URL 4. aws_access_key_id : your aws accesskey 5. aws_secret_access_key : secret key 6. image_directory: image directory inside s3 bucket where images will be stoed, make \&quot;generations\&quot; directory inside buckey and make sure its public, so you can access images using links
   * @param systemDetailsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VerifyModel200Response
   * @throws ApiException if fails to make API call
   */
  public VerifyModel200Response updateS3Details(SystemDetailsRequest systemDetailsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = systemDetailsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/update_s3";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<VerifyModel200Response> localVarReturnType = new TypeReference<VerifyModel200Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Update Server
   * Update Server
   * @param systemDetailsRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void updateServer(SystemDetailsRequest systemDetailsRequest) throws ApiException {
    this.updateServer(systemDetailsRequest, Collections.emptyMap());
  }


  /**
   * Update Server
   * Update Server
   * @param systemDetailsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void updateServer(SystemDetailsRequest systemDetailsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = systemDetailsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/update_server";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Upload Image
   * Upload Image
   * @param uploadImageRequest  (optional)
   * @throws ApiException if fails to make API call
   */
  public void uploadImage(UploadImageRequest uploadImageRequest) throws ApiException {
    this.uploadImage(uploadImageRequest, Collections.emptyMap());
  }


  /**
   * Upload Image
   * Upload Image
   * @param uploadImageRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void uploadImage(UploadImageRequest uploadImageRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = uploadImageRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/upload_image";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * Verify Model
   * Verify is specific model exists
   * @param systemDetailsRequest  (optional)
   * @return VerifyModel200Response
   * @throws ApiException if fails to make API call
   */
  public VerifyModel200Response verifyModel(SystemDetailsRequest systemDetailsRequest) throws ApiException {
    return this.verifyModel(systemDetailsRequest, Collections.emptyMap());
  }


  /**
   * Verify Model
   * Verify is specific model exists
   * @param systemDetailsRequest  (optional)
   * @param additionalHeaders additionalHeaders for this call
   * @return VerifyModel200Response
   * @throws ApiException if fails to make API call
   */
  public VerifyModel200Response verifyModel(SystemDetailsRequest systemDetailsRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = systemDetailsRequest;
    
    // create path and map variables
    String localVarPath = "/api/v1/enterprise/verify_model";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<VerifyModel200Response> localVarReturnType = new TypeReference<VerifyModel200Response>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
