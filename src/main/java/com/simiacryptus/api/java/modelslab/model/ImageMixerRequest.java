/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ImageMixerRequest
 */
@JsonPropertyOrder({
  ImageMixerRequest.JSON_PROPERTY_GUIDANCE_SCALE,
  ImageMixerRequest.JSON_PROPERTY_HEIGHT,
  ImageMixerRequest.JSON_PROPERTY_INIT_IMAGE,
  ImageMixerRequest.JSON_PROPERTY_INIT_IMAGE_WEIGHTS,
  ImageMixerRequest.JSON_PROPERTY_KEY,
  ImageMixerRequest.JSON_PROPERTY_NEGATIVE_PROMPT,
  ImageMixerRequest.JSON_PROPERTY_PROMPT,
  ImageMixerRequest.JSON_PROPERTY_SAMPLES,
  ImageMixerRequest.JSON_PROPERTY_SEED,
  ImageMixerRequest.JSON_PROPERTY_STEPS,
  ImageMixerRequest.JSON_PROPERTY_WIDTH
})
@JsonTypeName("imageMixer_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class ImageMixerRequest {
  public static final String JSON_PROPERTY_GUIDANCE_SCALE = "guidance_scale";
  private BigDecimal guidanceScale;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  private BigDecimal height;

  public static final String JSON_PROPERTY_INIT_IMAGE = "init_image";
  private String initImage;

  public static final String JSON_PROPERTY_INIT_IMAGE_WEIGHTS = "init_image_weights";
  private String initImageWeights;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_NEGATIVE_PROMPT = "negative_prompt";
  private String negativePrompt;

  public static final String JSON_PROPERTY_PROMPT = "prompt";
  private String prompt;

  public static final String JSON_PROPERTY_SAMPLES = "samples";
  private BigDecimal samples;

  public static final String JSON_PROPERTY_SEED = "seed";
  private BigDecimal seed;

  public static final String JSON_PROPERTY_STEPS = "steps";
  private BigDecimal steps;

  public static final String JSON_PROPERTY_WIDTH = "width";
  private BigDecimal width;

  public ImageMixerRequest() {
  }

  public ImageMixerRequest guidanceScale(BigDecimal guidanceScale) {
    
    this.guidanceScale = guidanceScale;
    return this;
  }

   /**
   * Get guidanceScale
   * @return guidanceScale
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GUIDANCE_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGuidanceScale() {
    return guidanceScale;
  }


  @JsonProperty(JSON_PROPERTY_GUIDANCE_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGuidanceScale(BigDecimal guidanceScale) {
    this.guidanceScale = guidanceScale;
  }


  public ImageMixerRequest height(BigDecimal height) {
    
    this.height = height;
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public ImageMixerRequest initImage(String initImage) {
    
    this.initImage = initImage;
    return this;
  }

   /**
   * Get initImage
   * @return initImage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INIT_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInitImage() {
    return initImage;
  }


  @JsonProperty(JSON_PROPERTY_INIT_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitImage(String initImage) {
    this.initImage = initImage;
  }


  public ImageMixerRequest initImageWeights(String initImageWeights) {
    
    this.initImageWeights = initImageWeights;
    return this;
  }

   /**
   * Get initImageWeights
   * @return initImageWeights
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INIT_IMAGE_WEIGHTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInitImageWeights() {
    return initImageWeights;
  }


  @JsonProperty(JSON_PROPERTY_INIT_IMAGE_WEIGHTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitImageWeights(String initImageWeights) {
    this.initImageWeights = initImageWeights;
  }


  public ImageMixerRequest key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public ImageMixerRequest negativePrompt(String negativePrompt) {
    
    this.negativePrompt = negativePrompt;
    return this;
  }

   /**
   * Get negativePrompt
   * @return negativePrompt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEGATIVE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNegativePrompt() {
    return negativePrompt;
  }


  @JsonProperty(JSON_PROPERTY_NEGATIVE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegativePrompt(String negativePrompt) {
    this.negativePrompt = negativePrompt;
  }


  public ImageMixerRequest prompt(String prompt) {
    
    this.prompt = prompt;
    return this;
  }

   /**
   * Get prompt
   * @return prompt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrompt() {
    return prompt;
  }


  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }


  public ImageMixerRequest samples(BigDecimal samples) {
    
    this.samples = samples;
    return this;
  }

   /**
   * Get samples
   * @return samples
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSamples() {
    return samples;
  }


  @JsonProperty(JSON_PROPERTY_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSamples(BigDecimal samples) {
    this.samples = samples;
  }


  public ImageMixerRequest seed(BigDecimal seed) {
    
    this.seed = seed;
    return this;
  }

   /**
   * Get seed
   * @return seed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSeed() {
    return seed;
  }


  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeed(BigDecimal seed) {
    this.seed = seed;
  }


  public ImageMixerRequest steps(BigDecimal steps) {
    
    this.steps = steps;
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSteps() {
    return steps;
  }


  @JsonProperty(JSON_PROPERTY_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSteps(BigDecimal steps) {
    this.steps = steps;
  }


  public ImageMixerRequest width(BigDecimal width) {
    
    this.width = width;
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(BigDecimal width) {
    this.width = width;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageMixerRequest imageMixerRequest = (ImageMixerRequest) o;
    return Objects.equals(this.guidanceScale, imageMixerRequest.guidanceScale) &&
        Objects.equals(this.height, imageMixerRequest.height) &&
        Objects.equals(this.initImage, imageMixerRequest.initImage) &&
        Objects.equals(this.initImageWeights, imageMixerRequest.initImageWeights) &&
        Objects.equals(this.key, imageMixerRequest.key) &&
        Objects.equals(this.negativePrompt, imageMixerRequest.negativePrompt) &&
        Objects.equals(this.prompt, imageMixerRequest.prompt) &&
        Objects.equals(this.samples, imageMixerRequest.samples) &&
        Objects.equals(this.seed, imageMixerRequest.seed) &&
        Objects.equals(this.steps, imageMixerRequest.steps) &&
        Objects.equals(this.width, imageMixerRequest.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(guidanceScale, height, initImage, initImageWeights, key, negativePrompt, prompt, samples, seed, steps, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageMixerRequest {\n");
    sb.append("    guidanceScale: ").append(toIndentedString(guidanceScale)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    initImage: ").append(toIndentedString(initImage)).append("\n");
    sb.append("    initImageWeights: ").append(toIndentedString(initImageWeights)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    negativePrompt: ").append(toIndentedString(negativePrompt)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    samples: ").append(toIndentedString(samples)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `guidance_scale` to the URL query string
    if (getGuidanceScale() != null) {
      try {
        joiner.add(String.format("%sguidance_scale%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGuidanceScale()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `height` to the URL query string
    if (getHeight() != null) {
      try {
        joiner.add(String.format("%sheight%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeight()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `init_image` to the URL query string
    if (getInitImage() != null) {
      try {
        joiner.add(String.format("%sinit_image%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInitImage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `init_image_weights` to the URL query string
    if (getInitImageWeights() != null) {
      try {
        joiner.add(String.format("%sinit_image_weights%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInitImageWeights()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `key` to the URL query string
    if (getKey() != null) {
      try {
        joiner.add(String.format("%skey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `negative_prompt` to the URL query string
    if (getNegativePrompt() != null) {
      try {
        joiner.add(String.format("%snegative_prompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNegativePrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `prompt` to the URL query string
    if (getPrompt() != null) {
      try {
        joiner.add(String.format("%sprompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `samples` to the URL query string
    if (getSamples() != null) {
      try {
        joiner.add(String.format("%ssamples%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSamples()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `seed` to the URL query string
    if (getSeed() != null) {
      try {
        joiner.add(String.format("%sseed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSeed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `steps` to the URL query string
    if (getSteps() != null) {
      try {
        joiner.add(String.format("%ssteps%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSteps()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `width` to the URL query string
    if (getWidth() != null) {
      try {
        joiner.add(String.format("%swidth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWidth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

