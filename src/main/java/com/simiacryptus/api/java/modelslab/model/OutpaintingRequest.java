/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * OutpaintingRequest
 */
@JsonPropertyOrder({
  OutpaintingRequest.JSON_PROPERTY_AS_VIDEO,
  OutpaintingRequest.JSON_PROPERTY_GUIDANCE_SCALE,
  OutpaintingRequest.JSON_PROPERTY_HEIGHT,
  OutpaintingRequest.JSON_PROPERTY_HEIGHT_TRANSLATION_PER_STEP,
  OutpaintingRequest.JSON_PROPERTY_IMAGE,
  OutpaintingRequest.JSON_PROPERTY_KEY,
  OutpaintingRequest.JSON_PROPERTY_NEGATIVE_PROMPT,
  OutpaintingRequest.JSON_PROPERTY_NUM_INFERENCE_STEPS,
  OutpaintingRequest.JSON_PROPERTY_NUM_INTERPOLATION_STEPS,
  OutpaintingRequest.JSON_PROPERTY_PROMPT,
  OutpaintingRequest.JSON_PROPERTY_TRACK_ID,
  OutpaintingRequest.JSON_PROPERTY_WALK_TYPE,
  OutpaintingRequest.JSON_PROPERTY_WEBHOOK,
  OutpaintingRequest.JSON_PROPERTY_WIDTH,
  OutpaintingRequest.JSON_PROPERTY_WIDTH_TRANSLATION_PER_STEP
})
@JsonTypeName("outpainting_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class OutpaintingRequest {
  public static final String JSON_PROPERTY_AS_VIDEO = "as_video";
  private String asVideo;

  public static final String JSON_PROPERTY_GUIDANCE_SCALE = "guidance_scale";
  private BigDecimal guidanceScale;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  private BigDecimal height;

  public static final String JSON_PROPERTY_HEIGHT_TRANSLATION_PER_STEP = "height_translation_per_step";
  private BigDecimal heightTranslationPerStep;

  public static final String JSON_PROPERTY_IMAGE = "image";
  private String image;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_NEGATIVE_PROMPT = "negative_prompt";
  private String negativePrompt;

  public static final String JSON_PROPERTY_NUM_INFERENCE_STEPS = "num_inference_steps";
  private BigDecimal numInferenceSteps;

  public static final String JSON_PROPERTY_NUM_INTERPOLATION_STEPS = "num_interpolation_steps";
  private BigDecimal numInterpolationSteps;

  public static final String JSON_PROPERTY_PROMPT = "prompt";
  private String prompt;

  public static final String JSON_PROPERTY_TRACK_ID = "track_id";
  private JsonNullable<Object> trackId = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_WALK_TYPE = "walk_type";
  private List<String> walkType;

  public static final String JSON_PROPERTY_WEBHOOK = "webhook";
  private JsonNullable<Object> webhook = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_WIDTH = "width";
  private BigDecimal width;

  public static final String JSON_PROPERTY_WIDTH_TRANSLATION_PER_STEP = "width_translation_per_step";
  private BigDecimal widthTranslationPerStep;

  public OutpaintingRequest() {
  }

  public OutpaintingRequest asVideo(String asVideo) {
    
    this.asVideo = asVideo;
    return this;
  }

   /**
   * Get asVideo
   * @return asVideo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AS_VIDEO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAsVideo() {
    return asVideo;
  }


  @JsonProperty(JSON_PROPERTY_AS_VIDEO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAsVideo(String asVideo) {
    this.asVideo = asVideo;
  }


  public OutpaintingRequest guidanceScale(BigDecimal guidanceScale) {
    
    this.guidanceScale = guidanceScale;
    return this;
  }

   /**
   * Get guidanceScale
   * @return guidanceScale
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GUIDANCE_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGuidanceScale() {
    return guidanceScale;
  }


  @JsonProperty(JSON_PROPERTY_GUIDANCE_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGuidanceScale(BigDecimal guidanceScale) {
    this.guidanceScale = guidanceScale;
  }


  public OutpaintingRequest height(BigDecimal height) {
    
    this.height = height;
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeight(BigDecimal height) {
    this.height = height;
  }


  public OutpaintingRequest heightTranslationPerStep(BigDecimal heightTranslationPerStep) {
    
    this.heightTranslationPerStep = heightTranslationPerStep;
    return this;
  }

   /**
   * Get heightTranslationPerStep
   * @return heightTranslationPerStep
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT_TRANSLATION_PER_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getHeightTranslationPerStep() {
    return heightTranslationPerStep;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT_TRANSLATION_PER_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeightTranslationPerStep(BigDecimal heightTranslationPerStep) {
    this.heightTranslationPerStep = heightTranslationPerStep;
  }


  public OutpaintingRequest image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImage(String image) {
    this.image = image;
  }


  public OutpaintingRequest key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public OutpaintingRequest negativePrompt(String negativePrompt) {
    
    this.negativePrompt = negativePrompt;
    return this;
  }

   /**
   * Get negativePrompt
   * @return negativePrompt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEGATIVE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNegativePrompt() {
    return negativePrompt;
  }


  @JsonProperty(JSON_PROPERTY_NEGATIVE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegativePrompt(String negativePrompt) {
    this.negativePrompt = negativePrompt;
  }


  public OutpaintingRequest numInferenceSteps(BigDecimal numInferenceSteps) {
    
    this.numInferenceSteps = numInferenceSteps;
    return this;
  }

   /**
   * Get numInferenceSteps
   * @return numInferenceSteps
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_INFERENCE_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNumInferenceSteps() {
    return numInferenceSteps;
  }


  @JsonProperty(JSON_PROPERTY_NUM_INFERENCE_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumInferenceSteps(BigDecimal numInferenceSteps) {
    this.numInferenceSteps = numInferenceSteps;
  }


  public OutpaintingRequest numInterpolationSteps(BigDecimal numInterpolationSteps) {
    
    this.numInterpolationSteps = numInterpolationSteps;
    return this;
  }

   /**
   * Get numInterpolationSteps
   * @return numInterpolationSteps
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUM_INTERPOLATION_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNumInterpolationSteps() {
    return numInterpolationSteps;
  }


  @JsonProperty(JSON_PROPERTY_NUM_INTERPOLATION_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumInterpolationSteps(BigDecimal numInterpolationSteps) {
    this.numInterpolationSteps = numInterpolationSteps;
  }


  public OutpaintingRequest prompt(String prompt) {
    
    this.prompt = prompt;
    return this;
  }

   /**
   * Get prompt
   * @return prompt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrompt() {
    return prompt;
  }


  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }


  public OutpaintingRequest trackId(Object trackId) {
    this.trackId = JsonNullable.<Object>of(trackId);
    
    return this;
  }

   /**
   * Get trackId
   * @return trackId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getTrackId() {
        return trackId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRACK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getTrackId_JsonNullable() {
    return trackId;
  }
  
  @JsonProperty(JSON_PROPERTY_TRACK_ID)
  public void setTrackId_JsonNullable(JsonNullable<Object> trackId) {
    this.trackId = trackId;
  }

  public void setTrackId(Object trackId) {
    this.trackId = JsonNullable.<Object>of(trackId);
  }


  public OutpaintingRequest walkType(List<String> walkType) {
    
    this.walkType = walkType;
    return this;
  }

  public OutpaintingRequest addWalkTypeItem(String walkTypeItem) {
    if (this.walkType == null) {
      this.walkType = new ArrayList<>();
    }
    this.walkType.add(walkTypeItem);
    return this;
  }

   /**
   * Get walkType
   * @return walkType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WALK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getWalkType() {
    return walkType;
  }


  @JsonProperty(JSON_PROPERTY_WALK_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWalkType(List<String> walkType) {
    this.walkType = walkType;
  }


  public OutpaintingRequest webhook(Object webhook) {
    this.webhook = JsonNullable.<Object>of(webhook);
    
    return this;
  }

   /**
   * Get webhook
   * @return webhook
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getWebhook() {
        return webhook.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WEBHOOK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getWebhook_JsonNullable() {
    return webhook;
  }
  
  @JsonProperty(JSON_PROPERTY_WEBHOOK)
  public void setWebhook_JsonNullable(JsonNullable<Object> webhook) {
    this.webhook = webhook;
  }

  public void setWebhook(Object webhook) {
    this.webhook = JsonNullable.<Object>of(webhook);
  }


  public OutpaintingRequest width(BigDecimal width) {
    
    this.width = width;
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(BigDecimal width) {
    this.width = width;
  }


  public OutpaintingRequest widthTranslationPerStep(BigDecimal widthTranslationPerStep) {
    
    this.widthTranslationPerStep = widthTranslationPerStep;
    return this;
  }

   /**
   * Get widthTranslationPerStep
   * @return widthTranslationPerStep
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH_TRANSLATION_PER_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getWidthTranslationPerStep() {
    return widthTranslationPerStep;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH_TRANSLATION_PER_STEP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidthTranslationPerStep(BigDecimal widthTranslationPerStep) {
    this.widthTranslationPerStep = widthTranslationPerStep;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutpaintingRequest outpaintingRequest = (OutpaintingRequest) o;
    return Objects.equals(this.asVideo, outpaintingRequest.asVideo) &&
        Objects.equals(this.guidanceScale, outpaintingRequest.guidanceScale) &&
        Objects.equals(this.height, outpaintingRequest.height) &&
        Objects.equals(this.heightTranslationPerStep, outpaintingRequest.heightTranslationPerStep) &&
        Objects.equals(this.image, outpaintingRequest.image) &&
        Objects.equals(this.key, outpaintingRequest.key) &&
        Objects.equals(this.negativePrompt, outpaintingRequest.negativePrompt) &&
        Objects.equals(this.numInferenceSteps, outpaintingRequest.numInferenceSteps) &&
        Objects.equals(this.numInterpolationSteps, outpaintingRequest.numInterpolationSteps) &&
        Objects.equals(this.prompt, outpaintingRequest.prompt) &&
        equalsNullable(this.trackId, outpaintingRequest.trackId) &&
        Objects.equals(this.walkType, outpaintingRequest.walkType) &&
        equalsNullable(this.webhook, outpaintingRequest.webhook) &&
        Objects.equals(this.width, outpaintingRequest.width) &&
        Objects.equals(this.widthTranslationPerStep, outpaintingRequest.widthTranslationPerStep);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(asVideo, guidanceScale, height, heightTranslationPerStep, image, key, negativePrompt, numInferenceSteps, numInterpolationSteps, prompt, hashCodeNullable(trackId), walkType, hashCodeNullable(webhook), width, widthTranslationPerStep);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutpaintingRequest {\n");
    sb.append("    asVideo: ").append(toIndentedString(asVideo)).append("\n");
    sb.append("    guidanceScale: ").append(toIndentedString(guidanceScale)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    heightTranslationPerStep: ").append(toIndentedString(heightTranslationPerStep)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    negativePrompt: ").append(toIndentedString(negativePrompt)).append("\n");
    sb.append("    numInferenceSteps: ").append(toIndentedString(numInferenceSteps)).append("\n");
    sb.append("    numInterpolationSteps: ").append(toIndentedString(numInterpolationSteps)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    trackId: ").append(toIndentedString(trackId)).append("\n");
    sb.append("    walkType: ").append(toIndentedString(walkType)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    widthTranslationPerStep: ").append(toIndentedString(widthTranslationPerStep)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `as_video` to the URL query string
    if (getAsVideo() != null) {
      try {
        joiner.add(String.format("%sas_video%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAsVideo()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `guidance_scale` to the URL query string
    if (getGuidanceScale() != null) {
      try {
        joiner.add(String.format("%sguidance_scale%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGuidanceScale()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `height` to the URL query string
    if (getHeight() != null) {
      try {
        joiner.add(String.format("%sheight%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeight()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `height_translation_per_step` to the URL query string
    if (getHeightTranslationPerStep() != null) {
      try {
        joiner.add(String.format("%sheight_translation_per_step%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeightTranslationPerStep()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `image` to the URL query string
    if (getImage() != null) {
      try {
        joiner.add(String.format("%simage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getImage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `key` to the URL query string
    if (getKey() != null) {
      try {
        joiner.add(String.format("%skey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `negative_prompt` to the URL query string
    if (getNegativePrompt() != null) {
      try {
        joiner.add(String.format("%snegative_prompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNegativePrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `num_inference_steps` to the URL query string
    if (getNumInferenceSteps() != null) {
      try {
        joiner.add(String.format("%snum_inference_steps%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumInferenceSteps()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `num_interpolation_steps` to the URL query string
    if (getNumInterpolationSteps() != null) {
      try {
        joiner.add(String.format("%snum_interpolation_steps%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNumInterpolationSteps()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `prompt` to the URL query string
    if (getPrompt() != null) {
      try {
        joiner.add(String.format("%sprompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `track_id` to the URL query string
    if (getTrackId() != null) {
      try {
        joiner.add(String.format("%strack_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTrackId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `walk_type` to the URL query string
    if (getWalkType() != null) {
      for (int i = 0; i < getWalkType().size(); i++) {
        try {
          joiner.add(String.format("%swalk_type%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getWalkType().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `webhook` to the URL query string
    if (getWebhook() != null) {
      try {
        joiner.add(String.format("%swebhook%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWebhook()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `width` to the URL query string
    if (getWidth() != null) {
      try {
        joiner.add(String.format("%swidth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWidth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `width_translation_per_step` to the URL query string
    if (getWidthTranslationPerStep() != null) {
      try {
        joiner.add(String.format("%swidth_translation_per_step%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWidthTranslationPerStep()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

