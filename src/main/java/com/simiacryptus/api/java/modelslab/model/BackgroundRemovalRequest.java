/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * BackgroundRemovalRequest
 */
@JsonPropertyOrder({
  BackgroundRemovalRequest.JSON_PROPERTY_ALPHA_MATTING,
  BackgroundRemovalRequest.JSON_PROPERTY_IMAGE,
  BackgroundRemovalRequest.JSON_PROPERTY_KEY,
  BackgroundRemovalRequest.JSON_PROPERTY_ONLY_MASK,
  BackgroundRemovalRequest.JSON_PROPERTY_POST_PROCESS_MASK,
  BackgroundRemovalRequest.JSON_PROPERTY_SEED,
  BackgroundRemovalRequest.JSON_PROPERTY_TRACK_ID,
  BackgroundRemovalRequest.JSON_PROPERTY_WEBHOOK
})
@JsonTypeName("backgroundRemoval_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class BackgroundRemovalRequest {
  public static final String JSON_PROPERTY_ALPHA_MATTING = "alpha_matting";
  private Boolean alphaMatting;

  public static final String JSON_PROPERTY_IMAGE = "image";
  private String image;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_ONLY_MASK = "only_mask";
  private Boolean onlyMask;

  public static final String JSON_PROPERTY_POST_PROCESS_MASK = "post_process_mask";
  private Boolean postProcessMask;

  public static final String JSON_PROPERTY_SEED = "seed";
  private BigDecimal seed;

  public static final String JSON_PROPERTY_TRACK_ID = "track_id";
  private JsonNullable<Object> trackId = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_WEBHOOK = "webhook";
  private JsonNullable<Object> webhook = JsonNullable.<Object>of(null);

  public BackgroundRemovalRequest() {
  }

  public BackgroundRemovalRequest alphaMatting(Boolean alphaMatting) {
    
    this.alphaMatting = alphaMatting;
    return this;
  }

   /**
   * Get alphaMatting
   * @return alphaMatting
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALPHA_MATTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAlphaMatting() {
    return alphaMatting;
  }


  @JsonProperty(JSON_PROPERTY_ALPHA_MATTING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlphaMatting(Boolean alphaMatting) {
    this.alphaMatting = alphaMatting;
  }


  public BackgroundRemovalRequest image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImage(String image) {
    this.image = image;
  }


  public BackgroundRemovalRequest key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKey(String key) {
    this.key = key;
  }


  public BackgroundRemovalRequest onlyMask(Boolean onlyMask) {
    
    this.onlyMask = onlyMask;
    return this;
  }

   /**
   * Get onlyMask
   * @return onlyMask
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ONLY_MASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getOnlyMask() {
    return onlyMask;
  }


  @JsonProperty(JSON_PROPERTY_ONLY_MASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnlyMask(Boolean onlyMask) {
    this.onlyMask = onlyMask;
  }


  public BackgroundRemovalRequest postProcessMask(Boolean postProcessMask) {
    
    this.postProcessMask = postProcessMask;
    return this;
  }

   /**
   * Get postProcessMask
   * @return postProcessMask
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POST_PROCESS_MASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPostProcessMask() {
    return postProcessMask;
  }


  @JsonProperty(JSON_PROPERTY_POST_PROCESS_MASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostProcessMask(Boolean postProcessMask) {
    this.postProcessMask = postProcessMask;
  }


  public BackgroundRemovalRequest seed(BigDecimal seed) {
    
    this.seed = seed;
    return this;
  }

   /**
   * Get seed
   * @return seed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSeed() {
    return seed;
  }


  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeed(BigDecimal seed) {
    this.seed = seed;
  }


  public BackgroundRemovalRequest trackId(Object trackId) {
    this.trackId = JsonNullable.<Object>of(trackId);
    
    return this;
  }

   /**
   * Get trackId
   * @return trackId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getTrackId() {
        return trackId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRACK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getTrackId_JsonNullable() {
    return trackId;
  }
  
  @JsonProperty(JSON_PROPERTY_TRACK_ID)
  public void setTrackId_JsonNullable(JsonNullable<Object> trackId) {
    this.trackId = trackId;
  }

  public void setTrackId(Object trackId) {
    this.trackId = JsonNullable.<Object>of(trackId);
  }


  public BackgroundRemovalRequest webhook(Object webhook) {
    this.webhook = JsonNullable.<Object>of(webhook);
    
    return this;
  }

   /**
   * Get webhook
   * @return webhook
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getWebhook() {
        return webhook.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WEBHOOK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getWebhook_JsonNullable() {
    return webhook;
  }
  
  @JsonProperty(JSON_PROPERTY_WEBHOOK)
  public void setWebhook_JsonNullable(JsonNullable<Object> webhook) {
    this.webhook = webhook;
  }

  public void setWebhook(Object webhook) {
    this.webhook = JsonNullable.<Object>of(webhook);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackgroundRemovalRequest backgroundRemovalRequest = (BackgroundRemovalRequest) o;
    return Objects.equals(this.alphaMatting, backgroundRemovalRequest.alphaMatting) &&
        Objects.equals(this.image, backgroundRemovalRequest.image) &&
        Objects.equals(this.key, backgroundRemovalRequest.key) &&
        Objects.equals(this.onlyMask, backgroundRemovalRequest.onlyMask) &&
        Objects.equals(this.postProcessMask, backgroundRemovalRequest.postProcessMask) &&
        Objects.equals(this.seed, backgroundRemovalRequest.seed) &&
        equalsNullable(this.trackId, backgroundRemovalRequest.trackId) &&
        equalsNullable(this.webhook, backgroundRemovalRequest.webhook);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(alphaMatting, image, key, onlyMask, postProcessMask, seed, hashCodeNullable(trackId), hashCodeNullable(webhook));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackgroundRemovalRequest {\n");
    sb.append("    alphaMatting: ").append(toIndentedString(alphaMatting)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    onlyMask: ").append(toIndentedString(onlyMask)).append("\n");
    sb.append("    postProcessMask: ").append(toIndentedString(postProcessMask)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    trackId: ").append(toIndentedString(trackId)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `alpha_matting` to the URL query string
    if (getAlphaMatting() != null) {
      try {
        joiner.add(String.format("%salpha_matting%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlphaMatting()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `image` to the URL query string
    if (getImage() != null) {
      try {
        joiner.add(String.format("%simage%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getImage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `key` to the URL query string
    if (getKey() != null) {
      try {
        joiner.add(String.format("%skey%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getKey()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `only_mask` to the URL query string
    if (getOnlyMask() != null) {
      try {
        joiner.add(String.format("%sonly_mask%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOnlyMask()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `post_process_mask` to the URL query string
    if (getPostProcessMask() != null) {
      try {
        joiner.add(String.format("%spost_process_mask%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPostProcessMask()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `seed` to the URL query string
    if (getSeed() != null) {
      try {
        joiner.add(String.format("%sseed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSeed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `track_id` to the URL query string
    if (getTrackId() != null) {
      try {
        joiner.add(String.format("%strack_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTrackId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `webhook` to the URL query string
    if (getWebhook() != null) {
      try {
        joiner.add(String.format("%swebhook%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWebhook()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

