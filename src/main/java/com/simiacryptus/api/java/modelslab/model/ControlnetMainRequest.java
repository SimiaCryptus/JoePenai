/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * ControlnetMainRequest
 */
@JsonPropertyOrder({
  ControlnetMainRequest.JSON_PROPERTY_ALGORITHM_TYPE,
  ControlnetMainRequest.JSON_PROPERTY_AUTO_HINT,
  ControlnetMainRequest.JSON_PROPERTY_BASE64,
  ControlnetMainRequest.JSON_PROPERTY_CLIP_SKIP,
  ControlnetMainRequest.JSON_PROPERTY_CONTROL_IMAGE,
  ControlnetMainRequest.JSON_PROPERTY_CONTROLNET_CONDITIONING_SCALE,
  ControlnetMainRequest.JSON_PROPERTY_CONTROLNET_MODEL,
  ControlnetMainRequest.JSON_PROPERTY_CONTROLNET_TYPE,
  ControlnetMainRequest.JSON_PROPERTY_EMBEDDINGS,
  ControlnetMainRequest.JSON_PROPERTY_GUESS_MODE,
  ControlnetMainRequest.JSON_PROPERTY_GUIDANCE,
  ControlnetMainRequest.JSON_PROPERTY_HEIGHT,
  ControlnetMainRequest.JSON_PROPERTY_INIT_IMAGE,
  ControlnetMainRequest.JSON_PROPERTY_INSTANT_RESPONSE,
  ControlnetMainRequest.JSON_PROPERTY_LORA,
  ControlnetMainRequest.JSON_PROPERTY_LORA_STRENGTH,
  ControlnetMainRequest.JSON_PROPERTY_MASK_IMAGE,
  ControlnetMainRequest.JSON_PROPERTY_MODEL_ID,
  ControlnetMainRequest.JSON_PROPERTY_MULTI_LINGUAL,
  ControlnetMainRequest.JSON_PROPERTY_NEGATIVE_PROMPT,
  ControlnetMainRequest.JSON_PROPERTY_PROMPT,
  ControlnetMainRequest.JSON_PROPERTY_SAFETY_CHECKER,
  ControlnetMainRequest.JSON_PROPERTY_SAFETY_CHECKER_TYPE,
  ControlnetMainRequest.JSON_PROPERTY_SAMPLES,
  ControlnetMainRequest.JSON_PROPERTY_SCHEDULER,
  ControlnetMainRequest.JSON_PROPERTY_SEED,
  ControlnetMainRequest.JSON_PROPERTY_STEPS,
  ControlnetMainRequest.JSON_PROPERTY_STRENGTH,
  ControlnetMainRequest.JSON_PROPERTY_TEMP,
  ControlnetMainRequest.JSON_PROPERTY_TOMESD,
  ControlnetMainRequest.JSON_PROPERTY_TRACK_ID,
  ControlnetMainRequest.JSON_PROPERTY_UPSCALE,
  ControlnetMainRequest.JSON_PROPERTY_USE_KARRAS_SIGMAS,
  ControlnetMainRequest.JSON_PROPERTY_VAE,
  ControlnetMainRequest.JSON_PROPERTY_WEBHOOK,
  ControlnetMainRequest.JSON_PROPERTY_WIDTH
})
@JsonTypeName("controlnetMain_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class ControlnetMainRequest {
  public static final String JSON_PROPERTY_ALGORITHM_TYPE = "algorithm_type";
  private JsonNullable<Object> algorithmType = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AUTO_HINT = "auto_hint";
  private String autoHint;

  public static final String JSON_PROPERTY_BASE64 = "base64";
  private JsonNullable<Object> base64 = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_CLIP_SKIP = "clip_skip";
  private JsonNullable<Object> clipSkip = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_CONTROL_IMAGE = "control_image";
  private String controlImage;

  public static final String JSON_PROPERTY_CONTROLNET_CONDITIONING_SCALE = "controlnet_conditioning_scale";
  private BigDecimal controlnetConditioningScale;

  public static final String JSON_PROPERTY_CONTROLNET_MODEL = "controlnet_model";
  private String controlnetModel;

  public static final String JSON_PROPERTY_CONTROLNET_TYPE = "controlnet_type";
  private String controlnetType;

  public static final String JSON_PROPERTY_EMBEDDINGS = "embeddings";
  private JsonNullable<Object> embeddings = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_GUESS_MODE = "guess_mode";
  private String guessMode;

  public static final String JSON_PROPERTY_GUIDANCE = "guidance";
  private BigDecimal guidance;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  private String height;

  public static final String JSON_PROPERTY_INIT_IMAGE = "init_image";
  private String initImage;

  public static final String JSON_PROPERTY_INSTANT_RESPONSE = "instant_response";
  private JsonNullable<Object> instantResponse = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_LORA = "lora";
  private String lora;

  public static final String JSON_PROPERTY_LORA_STRENGTH = "lora_strength";
  private JsonNullable<Object> loraStrength = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MASK_IMAGE = "mask_image";
  private JsonNullable<Object> maskImage = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MODEL_ID = "model_id";
  private String modelId;

  public static final String JSON_PROPERTY_MULTI_LINGUAL = "multi_lingual";
  private JsonNullable<Object> multiLingual = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_NEGATIVE_PROMPT = "negative_prompt";
  private JsonNullable<Object> negativePrompt = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_PROMPT = "prompt";
  private String prompt;

  public static final String JSON_PROPERTY_SAFETY_CHECKER = "safety_checker";
  private JsonNullable<Object> safetyChecker = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_SAFETY_CHECKER_TYPE = "safety_checker_type";
  private JsonNullable<Object> safetyCheckerType = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_SAMPLES = "samples";
  private String samples;

  public static final String JSON_PROPERTY_SCHEDULER = "scheduler";
  private String scheduler;

  public static final String JSON_PROPERTY_SEED = "seed";
  private BigDecimal seed;

  public static final String JSON_PROPERTY_STEPS = "steps";
  private BigDecimal steps;

  public static final String JSON_PROPERTY_STRENGTH = "strength";
  private BigDecimal strength;

  public static final String JSON_PROPERTY_TEMP = "temp";
  private JsonNullable<Object> temp = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_TOMESD = "tomesd";
  private JsonNullable<Object> tomesd = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_TRACK_ID = "track_id";
  private JsonNullable<Object> trackId = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_UPSCALE = "upscale";
  private JsonNullable<Object> upscale = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_USE_KARRAS_SIGMAS = "use_karras_sigmas";
  private JsonNullable<Object> useKarrasSigmas = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_VAE = "vae";
  private JsonNullable<Object> vae = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_WEBHOOK = "webhook";
  private JsonNullable<Object> webhook = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_WIDTH = "width";
  private String width;

  public ControlnetMainRequest() {
  }

  public ControlnetMainRequest algorithmType(Object algorithmType) {
    this.algorithmType = JsonNullable.<Object>of(algorithmType);
    
    return this;
  }

   /**
   * Get algorithmType
   * @return algorithmType
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAlgorithmType() {
        return algorithmType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ALGORITHM_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAlgorithmType_JsonNullable() {
    return algorithmType;
  }
  
  @JsonProperty(JSON_PROPERTY_ALGORITHM_TYPE)
  public void setAlgorithmType_JsonNullable(JsonNullable<Object> algorithmType) {
    this.algorithmType = algorithmType;
  }

  public void setAlgorithmType(Object algorithmType) {
    this.algorithmType = JsonNullable.<Object>of(algorithmType);
  }


  public ControlnetMainRequest autoHint(String autoHint) {
    
    this.autoHint = autoHint;
    return this;
  }

   /**
   * Get autoHint
   * @return autoHint
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_HINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAutoHint() {
    return autoHint;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_HINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoHint(String autoHint) {
    this.autoHint = autoHint;
  }


  public ControlnetMainRequest base64(Object base64) {
    this.base64 = JsonNullable.<Object>of(base64);
    
    return this;
  }

   /**
   * Get base64
   * @return base64
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getBase64() {
        return base64.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BASE64)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getBase64_JsonNullable() {
    return base64;
  }
  
  @JsonProperty(JSON_PROPERTY_BASE64)
  public void setBase64_JsonNullable(JsonNullable<Object> base64) {
    this.base64 = base64;
  }

  public void setBase64(Object base64) {
    this.base64 = JsonNullable.<Object>of(base64);
  }


  public ControlnetMainRequest clipSkip(Object clipSkip) {
    this.clipSkip = JsonNullable.<Object>of(clipSkip);
    
    return this;
  }

   /**
   * Get clipSkip
   * @return clipSkip
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getClipSkip() {
        return clipSkip.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CLIP_SKIP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getClipSkip_JsonNullable() {
    return clipSkip;
  }
  
  @JsonProperty(JSON_PROPERTY_CLIP_SKIP)
  public void setClipSkip_JsonNullable(JsonNullable<Object> clipSkip) {
    this.clipSkip = clipSkip;
  }

  public void setClipSkip(Object clipSkip) {
    this.clipSkip = JsonNullable.<Object>of(clipSkip);
  }


  public ControlnetMainRequest controlImage(String controlImage) {
    
    this.controlImage = controlImage;
    return this;
  }

   /**
   * Get controlImage
   * @return controlImage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTROL_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getControlImage() {
    return controlImage;
  }


  @JsonProperty(JSON_PROPERTY_CONTROL_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setControlImage(String controlImage) {
    this.controlImage = controlImage;
  }


  public ControlnetMainRequest controlnetConditioningScale(BigDecimal controlnetConditioningScale) {
    
    this.controlnetConditioningScale = controlnetConditioningScale;
    return this;
  }

   /**
   * Get controlnetConditioningScale
   * @return controlnetConditioningScale
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTROLNET_CONDITIONING_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getControlnetConditioningScale() {
    return controlnetConditioningScale;
  }


  @JsonProperty(JSON_PROPERTY_CONTROLNET_CONDITIONING_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setControlnetConditioningScale(BigDecimal controlnetConditioningScale) {
    this.controlnetConditioningScale = controlnetConditioningScale;
  }


  public ControlnetMainRequest controlnetModel(String controlnetModel) {
    
    this.controlnetModel = controlnetModel;
    return this;
  }

   /**
   * Get controlnetModel
   * @return controlnetModel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTROLNET_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getControlnetModel() {
    return controlnetModel;
  }


  @JsonProperty(JSON_PROPERTY_CONTROLNET_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setControlnetModel(String controlnetModel) {
    this.controlnetModel = controlnetModel;
  }


  public ControlnetMainRequest controlnetType(String controlnetType) {
    
    this.controlnetType = controlnetType;
    return this;
  }

   /**
   * Get controlnetType
   * @return controlnetType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTROLNET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getControlnetType() {
    return controlnetType;
  }


  @JsonProperty(JSON_PROPERTY_CONTROLNET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setControlnetType(String controlnetType) {
    this.controlnetType = controlnetType;
  }


  public ControlnetMainRequest embeddings(Object embeddings) {
    this.embeddings = JsonNullable.<Object>of(embeddings);
    
    return this;
  }

   /**
   * Get embeddings
   * @return embeddings
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getEmbeddings() {
        return embeddings.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EMBEDDINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getEmbeddings_JsonNullable() {
    return embeddings;
  }
  
  @JsonProperty(JSON_PROPERTY_EMBEDDINGS)
  public void setEmbeddings_JsonNullable(JsonNullable<Object> embeddings) {
    this.embeddings = embeddings;
  }

  public void setEmbeddings(Object embeddings) {
    this.embeddings = JsonNullable.<Object>of(embeddings);
  }


  public ControlnetMainRequest guessMode(String guessMode) {
    
    this.guessMode = guessMode;
    return this;
  }

   /**
   * Get guessMode
   * @return guessMode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GUESS_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGuessMode() {
    return guessMode;
  }


  @JsonProperty(JSON_PROPERTY_GUESS_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGuessMode(String guessMode) {
    this.guessMode = guessMode;
  }


  public ControlnetMainRequest guidance(BigDecimal guidance) {
    
    this.guidance = guidance;
    return this;
  }

   /**
   * Get guidance
   * @return guidance
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GUIDANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGuidance() {
    return guidance;
  }


  @JsonProperty(JSON_PROPERTY_GUIDANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGuidance(BigDecimal guidance) {
    this.guidance = guidance;
  }


  public ControlnetMainRequest height(String height) {
    
    this.height = height;
    return this;
  }

   /**
   * Get height
   * @return height
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeight(String height) {
    this.height = height;
  }


  public ControlnetMainRequest initImage(String initImage) {
    
    this.initImage = initImage;
    return this;
  }

   /**
   * Get initImage
   * @return initImage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INIT_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInitImage() {
    return initImage;
  }


  @JsonProperty(JSON_PROPERTY_INIT_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitImage(String initImage) {
    this.initImage = initImage;
  }


  public ControlnetMainRequest instantResponse(Object instantResponse) {
    this.instantResponse = JsonNullable.<Object>of(instantResponse);
    
    return this;
  }

   /**
   * Get instantResponse
   * @return instantResponse
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getInstantResponse() {
        return instantResponse.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INSTANT_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getInstantResponse_JsonNullable() {
    return instantResponse;
  }
  
  @JsonProperty(JSON_PROPERTY_INSTANT_RESPONSE)
  public void setInstantResponse_JsonNullable(JsonNullable<Object> instantResponse) {
    this.instantResponse = instantResponse;
  }

  public void setInstantResponse(Object instantResponse) {
    this.instantResponse = JsonNullable.<Object>of(instantResponse);
  }


  public ControlnetMainRequest lora(String lora) {
    
    this.lora = lora;
    return this;
  }

   /**
   * Get lora
   * @return lora
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LORA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLora() {
    return lora;
  }


  @JsonProperty(JSON_PROPERTY_LORA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLora(String lora) {
    this.lora = lora;
  }


  public ControlnetMainRequest loraStrength(Object loraStrength) {
    this.loraStrength = JsonNullable.<Object>of(loraStrength);
    
    return this;
  }

   /**
   * Get loraStrength
   * @return loraStrength
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getLoraStrength() {
        return loraStrength.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LORA_STRENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getLoraStrength_JsonNullable() {
    return loraStrength;
  }
  
  @JsonProperty(JSON_PROPERTY_LORA_STRENGTH)
  public void setLoraStrength_JsonNullable(JsonNullable<Object> loraStrength) {
    this.loraStrength = loraStrength;
  }

  public void setLoraStrength(Object loraStrength) {
    this.loraStrength = JsonNullable.<Object>of(loraStrength);
  }


  public ControlnetMainRequest maskImage(Object maskImage) {
    this.maskImage = JsonNullable.<Object>of(maskImage);
    
    return this;
  }

   /**
   * Get maskImage
   * @return maskImage
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaskImage() {
        return maskImage.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MASK_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaskImage_JsonNullable() {
    return maskImage;
  }
  
  @JsonProperty(JSON_PROPERTY_MASK_IMAGE)
  public void setMaskImage_JsonNullable(JsonNullable<Object> maskImage) {
    this.maskImage = maskImage;
  }

  public void setMaskImage(Object maskImage) {
    this.maskImage = JsonNullable.<Object>of(maskImage);
  }


  public ControlnetMainRequest modelId(String modelId) {
    
    this.modelId = modelId;
    return this;
  }

   /**
   * Get modelId
   * @return modelId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModelId() {
    return modelId;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelId(String modelId) {
    this.modelId = modelId;
  }


  public ControlnetMainRequest multiLingual(Object multiLingual) {
    this.multiLingual = JsonNullable.<Object>of(multiLingual);
    
    return this;
  }

   /**
   * Get multiLingual
   * @return multiLingual
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMultiLingual() {
        return multiLingual.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MULTI_LINGUAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMultiLingual_JsonNullable() {
    return multiLingual;
  }
  
  @JsonProperty(JSON_PROPERTY_MULTI_LINGUAL)
  public void setMultiLingual_JsonNullable(JsonNullable<Object> multiLingual) {
    this.multiLingual = multiLingual;
  }

  public void setMultiLingual(Object multiLingual) {
    this.multiLingual = JsonNullable.<Object>of(multiLingual);
  }


  public ControlnetMainRequest negativePrompt(Object negativePrompt) {
    this.negativePrompt = JsonNullable.<Object>of(negativePrompt);
    
    return this;
  }

   /**
   * Get negativePrompt
   * @return negativePrompt
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getNegativePrompt() {
        return negativePrompt.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NEGATIVE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getNegativePrompt_JsonNullable() {
    return negativePrompt;
  }
  
  @JsonProperty(JSON_PROPERTY_NEGATIVE_PROMPT)
  public void setNegativePrompt_JsonNullable(JsonNullable<Object> negativePrompt) {
    this.negativePrompt = negativePrompt;
  }

  public void setNegativePrompt(Object negativePrompt) {
    this.negativePrompt = JsonNullable.<Object>of(negativePrompt);
  }


  public ControlnetMainRequest prompt(String prompt) {
    
    this.prompt = prompt;
    return this;
  }

   /**
   * Get prompt
   * @return prompt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrompt() {
    return prompt;
  }


  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }


  public ControlnetMainRequest safetyChecker(Object safetyChecker) {
    this.safetyChecker = JsonNullable.<Object>of(safetyChecker);
    
    return this;
  }

   /**
   * Get safetyChecker
   * @return safetyChecker
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getSafetyChecker() {
        return safetyChecker.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SAFETY_CHECKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getSafetyChecker_JsonNullable() {
    return safetyChecker;
  }
  
  @JsonProperty(JSON_PROPERTY_SAFETY_CHECKER)
  public void setSafetyChecker_JsonNullable(JsonNullable<Object> safetyChecker) {
    this.safetyChecker = safetyChecker;
  }

  public void setSafetyChecker(Object safetyChecker) {
    this.safetyChecker = JsonNullable.<Object>of(safetyChecker);
  }


  public ControlnetMainRequest safetyCheckerType(Object safetyCheckerType) {
    this.safetyCheckerType = JsonNullable.<Object>of(safetyCheckerType);
    
    return this;
  }

   /**
   * Get safetyCheckerType
   * @return safetyCheckerType
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getSafetyCheckerType() {
        return safetyCheckerType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SAFETY_CHECKER_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getSafetyCheckerType_JsonNullable() {
    return safetyCheckerType;
  }
  
  @JsonProperty(JSON_PROPERTY_SAFETY_CHECKER_TYPE)
  public void setSafetyCheckerType_JsonNullable(JsonNullable<Object> safetyCheckerType) {
    this.safetyCheckerType = safetyCheckerType;
  }

  public void setSafetyCheckerType(Object safetyCheckerType) {
    this.safetyCheckerType = JsonNullable.<Object>of(safetyCheckerType);
  }


  public ControlnetMainRequest samples(String samples) {
    
    this.samples = samples;
    return this;
  }

   /**
   * Get samples
   * @return samples
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSamples() {
    return samples;
  }


  @JsonProperty(JSON_PROPERTY_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSamples(String samples) {
    this.samples = samples;
  }


  public ControlnetMainRequest scheduler(String scheduler) {
    
    this.scheduler = scheduler;
    return this;
  }

   /**
   * Get scheduler
   * @return scheduler
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEDULER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScheduler() {
    return scheduler;
  }


  @JsonProperty(JSON_PROPERTY_SCHEDULER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScheduler(String scheduler) {
    this.scheduler = scheduler;
  }


  public ControlnetMainRequest seed(BigDecimal seed) {
    
    this.seed = seed;
    return this;
  }

   /**
   * Get seed
   * @return seed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSeed() {
    return seed;
  }


  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeed(BigDecimal seed) {
    this.seed = seed;
  }


  public ControlnetMainRequest steps(BigDecimal steps) {
    
    this.steps = steps;
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSteps() {
    return steps;
  }


  @JsonProperty(JSON_PROPERTY_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSteps(BigDecimal steps) {
    this.steps = steps;
  }


  public ControlnetMainRequest strength(BigDecimal strength) {
    
    this.strength = strength;
    return this;
  }

   /**
   * Get strength
   * @return strength
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STRENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getStrength() {
    return strength;
  }


  @JsonProperty(JSON_PROPERTY_STRENGTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStrength(BigDecimal strength) {
    this.strength = strength;
  }


  public ControlnetMainRequest temp(Object temp) {
    this.temp = JsonNullable.<Object>of(temp);
    
    return this;
  }

   /**
   * Get temp
   * @return temp
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getTemp() {
        return temp.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getTemp_JsonNullable() {
    return temp;
  }
  
  @JsonProperty(JSON_PROPERTY_TEMP)
  public void setTemp_JsonNullable(JsonNullable<Object> temp) {
    this.temp = temp;
  }

  public void setTemp(Object temp) {
    this.temp = JsonNullable.<Object>of(temp);
  }


  public ControlnetMainRequest tomesd(Object tomesd) {
    this.tomesd = JsonNullable.<Object>of(tomesd);
    
    return this;
  }

   /**
   * Get tomesd
   * @return tomesd
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getTomesd() {
        return tomesd.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOMESD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getTomesd_JsonNullable() {
    return tomesd;
  }
  
  @JsonProperty(JSON_PROPERTY_TOMESD)
  public void setTomesd_JsonNullable(JsonNullable<Object> tomesd) {
    this.tomesd = tomesd;
  }

  public void setTomesd(Object tomesd) {
    this.tomesd = JsonNullable.<Object>of(tomesd);
  }


  public ControlnetMainRequest trackId(Object trackId) {
    this.trackId = JsonNullable.<Object>of(trackId);
    
    return this;
  }

   /**
   * Get trackId
   * @return trackId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getTrackId() {
        return trackId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRACK_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getTrackId_JsonNullable() {
    return trackId;
  }
  
  @JsonProperty(JSON_PROPERTY_TRACK_ID)
  public void setTrackId_JsonNullable(JsonNullable<Object> trackId) {
    this.trackId = trackId;
  }

  public void setTrackId(Object trackId) {
    this.trackId = JsonNullable.<Object>of(trackId);
  }


  public ControlnetMainRequest upscale(Object upscale) {
    this.upscale = JsonNullable.<Object>of(upscale);
    
    return this;
  }

   /**
   * Get upscale
   * @return upscale
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getUpscale() {
        return upscale.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_UPSCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getUpscale_JsonNullable() {
    return upscale;
  }
  
  @JsonProperty(JSON_PROPERTY_UPSCALE)
  public void setUpscale_JsonNullable(JsonNullable<Object> upscale) {
    this.upscale = upscale;
  }

  public void setUpscale(Object upscale) {
    this.upscale = JsonNullable.<Object>of(upscale);
  }


  public ControlnetMainRequest useKarrasSigmas(Object useKarrasSigmas) {
    this.useKarrasSigmas = JsonNullable.<Object>of(useKarrasSigmas);
    
    return this;
  }

   /**
   * Get useKarrasSigmas
   * @return useKarrasSigmas
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getUseKarrasSigmas() {
        return useKarrasSigmas.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_USE_KARRAS_SIGMAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getUseKarrasSigmas_JsonNullable() {
    return useKarrasSigmas;
  }
  
  @JsonProperty(JSON_PROPERTY_USE_KARRAS_SIGMAS)
  public void setUseKarrasSigmas_JsonNullable(JsonNullable<Object> useKarrasSigmas) {
    this.useKarrasSigmas = useKarrasSigmas;
  }

  public void setUseKarrasSigmas(Object useKarrasSigmas) {
    this.useKarrasSigmas = JsonNullable.<Object>of(useKarrasSigmas);
  }


  public ControlnetMainRequest vae(Object vae) {
    this.vae = JsonNullable.<Object>of(vae);
    
    return this;
  }

   /**
   * Get vae
   * @return vae
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getVae() {
        return vae.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VAE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getVae_JsonNullable() {
    return vae;
  }
  
  @JsonProperty(JSON_PROPERTY_VAE)
  public void setVae_JsonNullable(JsonNullable<Object> vae) {
    this.vae = vae;
  }

  public void setVae(Object vae) {
    this.vae = JsonNullable.<Object>of(vae);
  }


  public ControlnetMainRequest webhook(Object webhook) {
    this.webhook = JsonNullable.<Object>of(webhook);
    
    return this;
  }

   /**
   * Get webhook
   * @return webhook
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getWebhook() {
        return webhook.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_WEBHOOK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getWebhook_JsonNullable() {
    return webhook;
  }
  
  @JsonProperty(JSON_PROPERTY_WEBHOOK)
  public void setWebhook_JsonNullable(JsonNullable<Object> webhook) {
    this.webhook = webhook;
  }

  public void setWebhook(Object webhook) {
    this.webhook = JsonNullable.<Object>of(webhook);
  }


  public ControlnetMainRequest width(String width) {
    
    this.width = width;
    return this;
  }

   /**
   * Get width
   * @return width
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(String width) {
    this.width = width;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ControlnetMainRequest controlnetMainRequest = (ControlnetMainRequest) o;
    return equalsNullable(this.algorithmType, controlnetMainRequest.algorithmType) &&
        Objects.equals(this.autoHint, controlnetMainRequest.autoHint) &&
        equalsNullable(this.base64, controlnetMainRequest.base64) &&
        equalsNullable(this.clipSkip, controlnetMainRequest.clipSkip) &&
        Objects.equals(this.controlImage, controlnetMainRequest.controlImage) &&
        Objects.equals(this.controlnetConditioningScale, controlnetMainRequest.controlnetConditioningScale) &&
        Objects.equals(this.controlnetModel, controlnetMainRequest.controlnetModel) &&
        Objects.equals(this.controlnetType, controlnetMainRequest.controlnetType) &&
        equalsNullable(this.embeddings, controlnetMainRequest.embeddings) &&
        Objects.equals(this.guessMode, controlnetMainRequest.guessMode) &&
        Objects.equals(this.guidance, controlnetMainRequest.guidance) &&
        Objects.equals(this.height, controlnetMainRequest.height) &&
        Objects.equals(this.initImage, controlnetMainRequest.initImage) &&
        equalsNullable(this.instantResponse, controlnetMainRequest.instantResponse) &&
        Objects.equals(this.lora, controlnetMainRequest.lora) &&
        equalsNullable(this.loraStrength, controlnetMainRequest.loraStrength) &&
        equalsNullable(this.maskImage, controlnetMainRequest.maskImage) &&
        Objects.equals(this.modelId, controlnetMainRequest.modelId) &&
        equalsNullable(this.multiLingual, controlnetMainRequest.multiLingual) &&
        equalsNullable(this.negativePrompt, controlnetMainRequest.negativePrompt) &&
        Objects.equals(this.prompt, controlnetMainRequest.prompt) &&
        equalsNullable(this.safetyChecker, controlnetMainRequest.safetyChecker) &&
        equalsNullable(this.safetyCheckerType, controlnetMainRequest.safetyCheckerType) &&
        Objects.equals(this.samples, controlnetMainRequest.samples) &&
        Objects.equals(this.scheduler, controlnetMainRequest.scheduler) &&
        Objects.equals(this.seed, controlnetMainRequest.seed) &&
        Objects.equals(this.steps, controlnetMainRequest.steps) &&
        Objects.equals(this.strength, controlnetMainRequest.strength) &&
        equalsNullable(this.temp, controlnetMainRequest.temp) &&
        equalsNullable(this.tomesd, controlnetMainRequest.tomesd) &&
        equalsNullable(this.trackId, controlnetMainRequest.trackId) &&
        equalsNullable(this.upscale, controlnetMainRequest.upscale) &&
        equalsNullable(this.useKarrasSigmas, controlnetMainRequest.useKarrasSigmas) &&
        equalsNullable(this.vae, controlnetMainRequest.vae) &&
        equalsNullable(this.webhook, controlnetMainRequest.webhook) &&
        Objects.equals(this.width, controlnetMainRequest.width);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(algorithmType), autoHint, hashCodeNullable(base64), hashCodeNullable(clipSkip), controlImage, controlnetConditioningScale, controlnetModel, controlnetType, hashCodeNullable(embeddings), guessMode, guidance, height, initImage, hashCodeNullable(instantResponse), lora, hashCodeNullable(loraStrength), hashCodeNullable(maskImage), modelId, hashCodeNullable(multiLingual), hashCodeNullable(negativePrompt), prompt, hashCodeNullable(safetyChecker), hashCodeNullable(safetyCheckerType), samples, scheduler, seed, steps, strength, hashCodeNullable(temp), hashCodeNullable(tomesd), hashCodeNullable(trackId), hashCodeNullable(upscale), hashCodeNullable(useKarrasSigmas), hashCodeNullable(vae), hashCodeNullable(webhook), width);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ControlnetMainRequest {\n");
    sb.append("    algorithmType: ").append(toIndentedString(algorithmType)).append("\n");
    sb.append("    autoHint: ").append(toIndentedString(autoHint)).append("\n");
    sb.append("    base64: ").append(toIndentedString(base64)).append("\n");
    sb.append("    clipSkip: ").append(toIndentedString(clipSkip)).append("\n");
    sb.append("    controlImage: ").append(toIndentedString(controlImage)).append("\n");
    sb.append("    controlnetConditioningScale: ").append(toIndentedString(controlnetConditioningScale)).append("\n");
    sb.append("    controlnetModel: ").append(toIndentedString(controlnetModel)).append("\n");
    sb.append("    controlnetType: ").append(toIndentedString(controlnetType)).append("\n");
    sb.append("    embeddings: ").append(toIndentedString(embeddings)).append("\n");
    sb.append("    guessMode: ").append(toIndentedString(guessMode)).append("\n");
    sb.append("    guidance: ").append(toIndentedString(guidance)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    initImage: ").append(toIndentedString(initImage)).append("\n");
    sb.append("    instantResponse: ").append(toIndentedString(instantResponse)).append("\n");
    sb.append("    lora: ").append(toIndentedString(lora)).append("\n");
    sb.append("    loraStrength: ").append(toIndentedString(loraStrength)).append("\n");
    sb.append("    maskImage: ").append(toIndentedString(maskImage)).append("\n");
    sb.append("    modelId: ").append(toIndentedString(modelId)).append("\n");
    sb.append("    multiLingual: ").append(toIndentedString(multiLingual)).append("\n");
    sb.append("    negativePrompt: ").append(toIndentedString(negativePrompt)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    safetyChecker: ").append(toIndentedString(safetyChecker)).append("\n");
    sb.append("    safetyCheckerType: ").append(toIndentedString(safetyCheckerType)).append("\n");
    sb.append("    samples: ").append(toIndentedString(samples)).append("\n");
    sb.append("    scheduler: ").append(toIndentedString(scheduler)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    strength: ").append(toIndentedString(strength)).append("\n");
    sb.append("    temp: ").append(toIndentedString(temp)).append("\n");
    sb.append("    tomesd: ").append(toIndentedString(tomesd)).append("\n");
    sb.append("    trackId: ").append(toIndentedString(trackId)).append("\n");
    sb.append("    upscale: ").append(toIndentedString(upscale)).append("\n");
    sb.append("    useKarrasSigmas: ").append(toIndentedString(useKarrasSigmas)).append("\n");
    sb.append("    vae: ").append(toIndentedString(vae)).append("\n");
    sb.append("    webhook: ").append(toIndentedString(webhook)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `algorithm_type` to the URL query string
    if (getAlgorithmType() != null) {
      try {
        joiner.add(String.format("%salgorithm_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAlgorithmType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `auto_hint` to the URL query string
    if (getAutoHint() != null) {
      try {
        joiner.add(String.format("%sauto_hint%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getAutoHint()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `base64` to the URL query string
    if (getBase64() != null) {
      try {
        joiner.add(String.format("%sbase64%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getBase64()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `clip_skip` to the URL query string
    if (getClipSkip() != null) {
      try {
        joiner.add(String.format("%sclip_skip%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getClipSkip()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `control_image` to the URL query string
    if (getControlImage() != null) {
      try {
        joiner.add(String.format("%scontrol_image%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getControlImage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `controlnet_conditioning_scale` to the URL query string
    if (getControlnetConditioningScale() != null) {
      try {
        joiner.add(String.format("%scontrolnet_conditioning_scale%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getControlnetConditioningScale()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `controlnet_model` to the URL query string
    if (getControlnetModel() != null) {
      try {
        joiner.add(String.format("%scontrolnet_model%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getControlnetModel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `controlnet_type` to the URL query string
    if (getControlnetType() != null) {
      try {
        joiner.add(String.format("%scontrolnet_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getControlnetType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `embeddings` to the URL query string
    if (getEmbeddings() != null) {
      try {
        joiner.add(String.format("%sembeddings%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEmbeddings()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `guess_mode` to the URL query string
    if (getGuessMode() != null) {
      try {
        joiner.add(String.format("%sguess_mode%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGuessMode()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `guidance` to the URL query string
    if (getGuidance() != null) {
      try {
        joiner.add(String.format("%sguidance%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGuidance()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `height` to the URL query string
    if (getHeight() != null) {
      try {
        joiner.add(String.format("%sheight%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getHeight()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `init_image` to the URL query string
    if (getInitImage() != null) {
      try {
        joiner.add(String.format("%sinit_image%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInitImage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `instant_response` to the URL query string
    if (getInstantResponse() != null) {
      try {
        joiner.add(String.format("%sinstant_response%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getInstantResponse()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `lora` to the URL query string
    if (getLora() != null) {
      try {
        joiner.add(String.format("%slora%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLora()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `lora_strength` to the URL query string
    if (getLoraStrength() != null) {
      try {
        joiner.add(String.format("%slora_strength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLoraStrength()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `mask_image` to the URL query string
    if (getMaskImage() != null) {
      try {
        joiner.add(String.format("%smask_image%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaskImage()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `model_id` to the URL query string
    if (getModelId() != null) {
      try {
        joiner.add(String.format("%smodel_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModelId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `multi_lingual` to the URL query string
    if (getMultiLingual() != null) {
      try {
        joiner.add(String.format("%smulti_lingual%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMultiLingual()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `negative_prompt` to the URL query string
    if (getNegativePrompt() != null) {
      try {
        joiner.add(String.format("%snegative_prompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNegativePrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `prompt` to the URL query string
    if (getPrompt() != null) {
      try {
        joiner.add(String.format("%sprompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `safety_checker` to the URL query string
    if (getSafetyChecker() != null) {
      try {
        joiner.add(String.format("%ssafety_checker%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSafetyChecker()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `safety_checker_type` to the URL query string
    if (getSafetyCheckerType() != null) {
      try {
        joiner.add(String.format("%ssafety_checker_type%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSafetyCheckerType()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `samples` to the URL query string
    if (getSamples() != null) {
      try {
        joiner.add(String.format("%ssamples%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSamples()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `scheduler` to the URL query string
    if (getScheduler() != null) {
      try {
        joiner.add(String.format("%sscheduler%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getScheduler()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `seed` to the URL query string
    if (getSeed() != null) {
      try {
        joiner.add(String.format("%sseed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSeed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `steps` to the URL query string
    if (getSteps() != null) {
      try {
        joiner.add(String.format("%ssteps%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSteps()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `strength` to the URL query string
    if (getStrength() != null) {
      try {
        joiner.add(String.format("%sstrength%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStrength()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `temp` to the URL query string
    if (getTemp() != null) {
      try {
        joiner.add(String.format("%stemp%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTemp()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tomesd` to the URL query string
    if (getTomesd() != null) {
      try {
        joiner.add(String.format("%stomesd%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTomesd()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `track_id` to the URL query string
    if (getTrackId() != null) {
      try {
        joiner.add(String.format("%strack_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTrackId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `upscale` to the URL query string
    if (getUpscale() != null) {
      try {
        joiner.add(String.format("%supscale%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUpscale()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `use_karras_sigmas` to the URL query string
    if (getUseKarrasSigmas() != null) {
      try {
        joiner.add(String.format("%suse_karras_sigmas%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUseKarrasSigmas()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `vae` to the URL query string
    if (getVae() != null) {
      try {
        joiner.add(String.format("%svae%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVae()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `webhook` to the URL query string
    if (getWebhook() != null) {
      try {
        joiner.add(String.format("%swebhook%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWebhook()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `width` to the URL query string
    if (getWidth() != null) {
      try {
        joiner.add(String.format("%swidth%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getWidth()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

