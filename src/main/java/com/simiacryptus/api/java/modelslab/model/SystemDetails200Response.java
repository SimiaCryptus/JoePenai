/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * SystemDetails200Response
 */
@JsonPropertyOrder({
  SystemDetails200Response.JSON_PROPERTY_MODEL_COUNT,
  SystemDetails200Response.JSON_PROPERTY_QUEUE_TIME,
  SystemDetails200Response.JSON_PROPERTY_STATUS
})
@JsonTypeName("systemDetails_200_response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class SystemDetails200Response {
  public static final String JSON_PROPERTY_MODEL_COUNT = "model_count";
  private BigDecimal modelCount;

  public static final String JSON_PROPERTY_QUEUE_TIME = "queue_time";
  private BigDecimal queueTime;

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public SystemDetails200Response() {
  }

  public SystemDetails200Response modelCount(BigDecimal modelCount) {
    
    this.modelCount = modelCount;
    return this;
  }

   /**
   * Get modelCount
   * @return modelCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getModelCount() {
    return modelCount;
  }


  @JsonProperty(JSON_PROPERTY_MODEL_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModelCount(BigDecimal modelCount) {
    this.modelCount = modelCount;
  }


  public SystemDetails200Response queueTime(BigDecimal queueTime) {
    
    this.queueTime = queueTime;
    return this;
  }

   /**
   * Get queueTime
   * @return queueTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUEUE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getQueueTime() {
    return queueTime;
  }


  @JsonProperty(JSON_PROPERTY_QUEUE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueueTime(BigDecimal queueTime) {
    this.queueTime = queueTime;
  }


  public SystemDetails200Response status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SystemDetails200Response systemDetails200Response = (SystemDetails200Response) o;
    return Objects.equals(this.modelCount, systemDetails200Response.modelCount) &&
        Objects.equals(this.queueTime, systemDetails200Response.queueTime) &&
        Objects.equals(this.status, systemDetails200Response.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelCount, queueTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SystemDetails200Response {\n");
    sb.append("    modelCount: ").append(toIndentedString(modelCount)).append("\n");
    sb.append("    queueTime: ").append(toIndentedString(queueTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `model_count` to the URL query string
    if (getModelCount() != null) {
      try {
        joiner.add(String.format("%smodel_count%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModelCount()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `queue_time` to the URL query string
    if (getQueueTime() != null) {
      try {
        joiner.add(String.format("%squeue_time%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getQueueTime()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      try {
        joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

