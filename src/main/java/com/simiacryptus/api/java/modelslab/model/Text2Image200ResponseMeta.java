/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * Text2Image200ResponseMeta
 */
@JsonPropertyOrder({
  Text2Image200ResponseMeta.JSON_PROPERTY_H,
  Text2Image200ResponseMeta.JSON_PROPERTY_W,
  Text2Image200ResponseMeta.JSON_PROPERTY_ENABLE_ATTENTION_SLICING,
  Text2Image200ResponseMeta.JSON_PROPERTY_FILE_PREFIX,
  Text2Image200ResponseMeta.JSON_PROPERTY_GUIDANCE_SCALE,
  Text2Image200ResponseMeta.JSON_PROPERTY_MODEL,
  Text2Image200ResponseMeta.JSON_PROPERTY_N_SAMPLES,
  Text2Image200ResponseMeta.JSON_PROPERTY_NEGATIVE_PROMPT,
  Text2Image200ResponseMeta.JSON_PROPERTY_OUTDIR,
  Text2Image200ResponseMeta.JSON_PROPERTY_PROMPT,
  Text2Image200ResponseMeta.JSON_PROPERTY_REVISION,
  Text2Image200ResponseMeta.JSON_PROPERTY_SAFETY_CHECKER,
  Text2Image200ResponseMeta.JSON_PROPERTY_SEED,
  Text2Image200ResponseMeta.JSON_PROPERTY_STEPS,
  Text2Image200ResponseMeta.JSON_PROPERTY_VAE
})
@JsonTypeName("text2Image_200_response_meta")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:25:01.849546200-05:00[America/New_York]")
public class Text2Image200ResponseMeta {
  public static final String JSON_PROPERTY_H = "H";
  private BigDecimal H;

  public static final String JSON_PROPERTY_W = "W";
  private BigDecimal W;

  public static final String JSON_PROPERTY_ENABLE_ATTENTION_SLICING = "enable_attention_slicing";
  private String enableAttentionSlicing;

  public static final String JSON_PROPERTY_FILE_PREFIX = "file_prefix";
  private String filePrefix;

  public static final String JSON_PROPERTY_GUIDANCE_SCALE = "guidance_scale";
  private BigDecimal guidanceScale;

  public static final String JSON_PROPERTY_MODEL = "model";
  private String model;

  public static final String JSON_PROPERTY_N_SAMPLES = "n_samples";
  private BigDecimal nSamples;

  public static final String JSON_PROPERTY_NEGATIVE_PROMPT = "negative_prompt";
  private String negativePrompt;

  public static final String JSON_PROPERTY_OUTDIR = "outdir";
  private String outdir;

  public static final String JSON_PROPERTY_PROMPT = "prompt";
  private String prompt;

  public static final String JSON_PROPERTY_REVISION = "revision";
  private String revision;

  public static final String JSON_PROPERTY_SAFETY_CHECKER = "safety_checker";
  private String safetyChecker;

  public static final String JSON_PROPERTY_SEED = "seed";
  private BigDecimal seed;

  public static final String JSON_PROPERTY_STEPS = "steps";
  private BigDecimal steps;

  public static final String JSON_PROPERTY_VAE = "vae";
  private String vae;

  public Text2Image200ResponseMeta() {
  }

  public Text2Image200ResponseMeta H(BigDecimal H) {
    
    this.H = H;
    return this;
  }

   /**
   * Get H
   * @return H
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_H)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getH() {
    return H;
  }


  @JsonProperty(JSON_PROPERTY_H)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setH(BigDecimal H) {
    this.H = H;
  }


  public Text2Image200ResponseMeta W(BigDecimal W) {
    
    this.W = W;
    return this;
  }

   /**
   * Get W
   * @return W
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_W)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getW() {
    return W;
  }


  @JsonProperty(JSON_PROPERTY_W)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setW(BigDecimal W) {
    this.W = W;
  }


  public Text2Image200ResponseMeta enableAttentionSlicing(String enableAttentionSlicing) {
    
    this.enableAttentionSlicing = enableAttentionSlicing;
    return this;
  }

   /**
   * Get enableAttentionSlicing
   * @return enableAttentionSlicing
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_ATTENTION_SLICING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEnableAttentionSlicing() {
    return enableAttentionSlicing;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_ATTENTION_SLICING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableAttentionSlicing(String enableAttentionSlicing) {
    this.enableAttentionSlicing = enableAttentionSlicing;
  }


  public Text2Image200ResponseMeta filePrefix(String filePrefix) {
    
    this.filePrefix = filePrefix;
    return this;
  }

   /**
   * Get filePrefix
   * @return filePrefix
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFilePrefix() {
    return filePrefix;
  }


  @JsonProperty(JSON_PROPERTY_FILE_PREFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilePrefix(String filePrefix) {
    this.filePrefix = filePrefix;
  }


  public Text2Image200ResponseMeta guidanceScale(BigDecimal guidanceScale) {
    
    this.guidanceScale = guidanceScale;
    return this;
  }

   /**
   * Get guidanceScale
   * @return guidanceScale
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GUIDANCE_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGuidanceScale() {
    return guidanceScale;
  }


  @JsonProperty(JSON_PROPERTY_GUIDANCE_SCALE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGuidanceScale(BigDecimal guidanceScale) {
    this.guidanceScale = guidanceScale;
  }


  public Text2Image200ResponseMeta model(String model) {
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setModel(String model) {
    this.model = model;
  }


  public Text2Image200ResponseMeta nSamples(BigDecimal nSamples) {
    
    this.nSamples = nSamples;
    return this;
  }

   /**
   * Get nSamples
   * @return nSamples
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_N_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getnSamples() {
    return nSamples;
  }


  @JsonProperty(JSON_PROPERTY_N_SAMPLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setnSamples(BigDecimal nSamples) {
    this.nSamples = nSamples;
  }


  public Text2Image200ResponseMeta negativePrompt(String negativePrompt) {
    
    this.negativePrompt = negativePrompt;
    return this;
  }

   /**
   * Get negativePrompt
   * @return negativePrompt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEGATIVE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNegativePrompt() {
    return negativePrompt;
  }


  @JsonProperty(JSON_PROPERTY_NEGATIVE_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegativePrompt(String negativePrompt) {
    this.negativePrompt = negativePrompt;
  }


  public Text2Image200ResponseMeta outdir(String outdir) {
    
    this.outdir = outdir;
    return this;
  }

   /**
   * Get outdir
   * @return outdir
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTDIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOutdir() {
    return outdir;
  }


  @JsonProperty(JSON_PROPERTY_OUTDIR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutdir(String outdir) {
    this.outdir = outdir;
  }


  public Text2Image200ResponseMeta prompt(String prompt) {
    
    this.prompt = prompt;
    return this;
  }

   /**
   * Get prompt
   * @return prompt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrompt() {
    return prompt;
  }


  @JsonProperty(JSON_PROPERTY_PROMPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrompt(String prompt) {
    this.prompt = prompt;
  }


  public Text2Image200ResponseMeta revision(String revision) {
    
    this.revision = revision;
    return this;
  }

   /**
   * Get revision
   * @return revision
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRevision() {
    return revision;
  }


  @JsonProperty(JSON_PROPERTY_REVISION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevision(String revision) {
    this.revision = revision;
  }


  public Text2Image200ResponseMeta safetyChecker(String safetyChecker) {
    
    this.safetyChecker = safetyChecker;
    return this;
  }

   /**
   * Get safetyChecker
   * @return safetyChecker
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SAFETY_CHECKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSafetyChecker() {
    return safetyChecker;
  }


  @JsonProperty(JSON_PROPERTY_SAFETY_CHECKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSafetyChecker(String safetyChecker) {
    this.safetyChecker = safetyChecker;
  }


  public Text2Image200ResponseMeta seed(BigDecimal seed) {
    
    this.seed = seed;
    return this;
  }

   /**
   * Get seed
   * @return seed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSeed() {
    return seed;
  }


  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeed(BigDecimal seed) {
    this.seed = seed;
  }


  public Text2Image200ResponseMeta steps(BigDecimal steps) {
    
    this.steps = steps;
    return this;
  }

   /**
   * Get steps
   * @return steps
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSteps() {
    return steps;
  }


  @JsonProperty(JSON_PROPERTY_STEPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSteps(BigDecimal steps) {
    this.steps = steps;
  }


  public Text2Image200ResponseMeta vae(String vae) {
    
    this.vae = vae;
    return this;
  }

   /**
   * Get vae
   * @return vae
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VAE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVae() {
    return vae;
  }


  @JsonProperty(JSON_PROPERTY_VAE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVae(String vae) {
    this.vae = vae;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Text2Image200ResponseMeta text2Image200ResponseMeta = (Text2Image200ResponseMeta) o;
    return Objects.equals(this.H, text2Image200ResponseMeta.H) &&
        Objects.equals(this.W, text2Image200ResponseMeta.W) &&
        Objects.equals(this.enableAttentionSlicing, text2Image200ResponseMeta.enableAttentionSlicing) &&
        Objects.equals(this.filePrefix, text2Image200ResponseMeta.filePrefix) &&
        Objects.equals(this.guidanceScale, text2Image200ResponseMeta.guidanceScale) &&
        Objects.equals(this.model, text2Image200ResponseMeta.model) &&
        Objects.equals(this.nSamples, text2Image200ResponseMeta.nSamples) &&
        Objects.equals(this.negativePrompt, text2Image200ResponseMeta.negativePrompt) &&
        Objects.equals(this.outdir, text2Image200ResponseMeta.outdir) &&
        Objects.equals(this.prompt, text2Image200ResponseMeta.prompt) &&
        Objects.equals(this.revision, text2Image200ResponseMeta.revision) &&
        Objects.equals(this.safetyChecker, text2Image200ResponseMeta.safetyChecker) &&
        Objects.equals(this.seed, text2Image200ResponseMeta.seed) &&
        Objects.equals(this.steps, text2Image200ResponseMeta.steps) &&
        Objects.equals(this.vae, text2Image200ResponseMeta.vae);
  }

  @Override
  public int hashCode() {
    return Objects.hash(H, W, enableAttentionSlicing, filePrefix, guidanceScale, model, nSamples, negativePrompt, outdir, prompt, revision, safetyChecker, seed, steps, vae);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Text2Image200ResponseMeta {\n");
    sb.append("    H: ").append(toIndentedString(H)).append("\n");
    sb.append("    W: ").append(toIndentedString(W)).append("\n");
    sb.append("    enableAttentionSlicing: ").append(toIndentedString(enableAttentionSlicing)).append("\n");
    sb.append("    filePrefix: ").append(toIndentedString(filePrefix)).append("\n");
    sb.append("    guidanceScale: ").append(toIndentedString(guidanceScale)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    nSamples: ").append(toIndentedString(nSamples)).append("\n");
    sb.append("    negativePrompt: ").append(toIndentedString(negativePrompt)).append("\n");
    sb.append("    outdir: ").append(toIndentedString(outdir)).append("\n");
    sb.append("    prompt: ").append(toIndentedString(prompt)).append("\n");
    sb.append("    revision: ").append(toIndentedString(revision)).append("\n");
    sb.append("    safetyChecker: ").append(toIndentedString(safetyChecker)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    steps: ").append(toIndentedString(steps)).append("\n");
    sb.append("    vae: ").append(toIndentedString(vae)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `H` to the URL query string
    if (getH() != null) {
      try {
        joiner.add(String.format("%sH%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getH()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `W` to the URL query string
    if (getW() != null) {
      try {
        joiner.add(String.format("%sW%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getW()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `enable_attention_slicing` to the URL query string
    if (getEnableAttentionSlicing() != null) {
      try {
        joiner.add(String.format("%senable_attention_slicing%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getEnableAttentionSlicing()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `file_prefix` to the URL query string
    if (getFilePrefix() != null) {
      try {
        joiner.add(String.format("%sfile_prefix%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFilePrefix()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `guidance_scale` to the URL query string
    if (getGuidanceScale() != null) {
      try {
        joiner.add(String.format("%sguidance_scale%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getGuidanceScale()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `model` to the URL query string
    if (getModel() != null) {
      try {
        joiner.add(String.format("%smodel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `n_samples` to the URL query string
    if (getnSamples() != null) {
      try {
        joiner.add(String.format("%sn_samples%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getnSamples()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `negative_prompt` to the URL query string
    if (getNegativePrompt() != null) {
      try {
        joiner.add(String.format("%snegative_prompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getNegativePrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `outdir` to the URL query string
    if (getOutdir() != null) {
      try {
        joiner.add(String.format("%soutdir%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOutdir()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `prompt` to the URL query string
    if (getPrompt() != null) {
      try {
        joiner.add(String.format("%sprompt%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPrompt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `revision` to the URL query string
    if (getRevision() != null) {
      try {
        joiner.add(String.format("%srevision%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getRevision()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `safety_checker` to the URL query string
    if (getSafetyChecker() != null) {
      try {
        joiner.add(String.format("%ssafety_checker%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSafetyChecker()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `seed` to the URL query string
    if (getSeed() != null) {
      try {
        joiner.add(String.format("%sseed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSeed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `steps` to the URL query string
    if (getSteps() != null) {
      try {
        joiner.add(String.format("%ssteps%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSteps()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `vae` to the URL query string
    if (getVae() != null) {
      try {
        joiner.add(String.format("%svae%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getVae()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

