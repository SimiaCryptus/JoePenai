/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.openai.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.simiacryptus.api.java.openai.model.ChatCompletionFunctions;
import com.simiacryptus.api.java.openai.model.ChatCompletionRequestMessage;
import com.simiacryptus.api.java.openai.model.ChatCompletionTool;
import com.simiacryptus.api.java.openai.model.ChatCompletionToolChoiceOption;
import com.simiacryptus.api.java.openai.model.CreateChatCompletionRequestFunctionCall;
import com.simiacryptus.api.java.openai.model.CreateChatCompletionRequestModel;
import com.simiacryptus.api.java.openai.model.CreateChatCompletionRequestResponseFormat;
import com.simiacryptus.api.java.openai.model.CreateChatCompletionRequestStop;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CreateChatCompletionRequest
 */
@JsonPropertyOrder({
  CreateChatCompletionRequest.JSON_PROPERTY_MESSAGES,
  CreateChatCompletionRequest.JSON_PROPERTY_MODEL,
  CreateChatCompletionRequest.JSON_PROPERTY_FREQUENCY_PENALTY,
  CreateChatCompletionRequest.JSON_PROPERTY_LOGIT_BIAS,
  CreateChatCompletionRequest.JSON_PROPERTY_LOGPROBS,
  CreateChatCompletionRequest.JSON_PROPERTY_TOP_LOGPROBS,
  CreateChatCompletionRequest.JSON_PROPERTY_MAX_TOKENS,
  CreateChatCompletionRequest.JSON_PROPERTY_N,
  CreateChatCompletionRequest.JSON_PROPERTY_PRESENCE_PENALTY,
  CreateChatCompletionRequest.JSON_PROPERTY_RESPONSE_FORMAT,
  CreateChatCompletionRequest.JSON_PROPERTY_SEED,
  CreateChatCompletionRequest.JSON_PROPERTY_STOP,
  CreateChatCompletionRequest.JSON_PROPERTY_STREAM,
  CreateChatCompletionRequest.JSON_PROPERTY_TEMPERATURE,
  CreateChatCompletionRequest.JSON_PROPERTY_TOP_P,
  CreateChatCompletionRequest.JSON_PROPERTY_TOOLS,
  CreateChatCompletionRequest.JSON_PROPERTY_TOOL_CHOICE,
  CreateChatCompletionRequest.JSON_PROPERTY_USER,
  CreateChatCompletionRequest.JSON_PROPERTY_FUNCTION_CALL,
  CreateChatCompletionRequest.JSON_PROPERTY_FUNCTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:24:46.732753800-05:00[America/New_York]")
public class CreateChatCompletionRequest {
  public static final String JSON_PROPERTY_MESSAGES = "messages";
  private List<ChatCompletionRequestMessage> messages = new ArrayList<>();

  public static final String JSON_PROPERTY_MODEL = "model";
  private CreateChatCompletionRequestModel model;

  public static final String JSON_PROPERTY_FREQUENCY_PENALTY = "frequency_penalty";
  private JsonNullable<BigDecimal> frequencyPenalty = JsonNullable.<BigDecimal>of(new BigDecimal("0"));

  public static final String JSON_PROPERTY_LOGIT_BIAS = "logit_bias";
  private JsonNullable<Map<String, Integer>> logitBias = JsonNullable.<Map<String, Integer>>undefined();

  public static final String JSON_PROPERTY_LOGPROBS = "logprobs";
  private JsonNullable<Boolean> logprobs = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_TOP_LOGPROBS = "top_logprobs";
  private JsonNullable<Integer> topLogprobs = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_MAX_TOKENS = "max_tokens";
  private JsonNullable<Integer> maxTokens = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_N = "n";
  private JsonNullable<Integer> n = JsonNullable.<Integer>of(1);

  public static final String JSON_PROPERTY_PRESENCE_PENALTY = "presence_penalty";
  private JsonNullable<BigDecimal> presencePenalty = JsonNullable.<BigDecimal>of(new BigDecimal("0"));

  public static final String JSON_PROPERTY_RESPONSE_FORMAT = "response_format";
  private CreateChatCompletionRequestResponseFormat responseFormat;

  public static final String JSON_PROPERTY_SEED = "seed";
  private JsonNullable<Integer> seed = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_STOP = "stop";
  private CreateChatCompletionRequestStop stop = null;

  public static final String JSON_PROPERTY_STREAM = "stream";
  private JsonNullable<Boolean> stream = JsonNullable.<Boolean>of(false);

  public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
  private JsonNullable<BigDecimal> temperature = JsonNullable.<BigDecimal>of(new BigDecimal("1"));

  public static final String JSON_PROPERTY_TOP_P = "top_p";
  private JsonNullable<BigDecimal> topP = JsonNullable.<BigDecimal>of(new BigDecimal("1"));

  public static final String JSON_PROPERTY_TOOLS = "tools";
  private List<ChatCompletionTool> tools;

  public static final String JSON_PROPERTY_TOOL_CHOICE = "tool_choice";
  private ChatCompletionToolChoiceOption toolChoice;

  public static final String JSON_PROPERTY_USER = "user";
  private String user;

  public static final String JSON_PROPERTY_FUNCTION_CALL = "function_call";
  private CreateChatCompletionRequestFunctionCall functionCall;

  public static final String JSON_PROPERTY_FUNCTIONS = "functions";
  private List<ChatCompletionFunctions> functions;

  public CreateChatCompletionRequest() {
  }

  public CreateChatCompletionRequest messages(List<ChatCompletionRequestMessage> messages) {
    
    this.messages = messages;
    return this;
  }

  public CreateChatCompletionRequest addMessagesItem(ChatCompletionRequestMessage messagesItem) {
    if (this.messages == null) {
      this.messages = new ArrayList<>();
    }
    this.messages.add(messagesItem);
    return this;
  }

   /**
   * A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
   * @return messages
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ChatCompletionRequestMessage> getMessages() {
    return messages;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessages(List<ChatCompletionRequestMessage> messages) {
    this.messages = messages;
  }


  public CreateChatCompletionRequest model(CreateChatCompletionRequestModel model) {
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CreateChatCompletionRequestModel getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModel(CreateChatCompletionRequestModel model) {
    this.model = model;
  }


  public CreateChatCompletionRequest frequencyPenalty(BigDecimal frequencyPenalty) {
    this.frequencyPenalty = JsonNullable.<BigDecimal>of(frequencyPenalty);
    
    return this;
  }

   /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model&#39;s likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
   * minimum: -2
   * maximum: 2
   * @return frequencyPenalty
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getFrequencyPenalty() {
        return frequencyPenalty.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FREQUENCY_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getFrequencyPenalty_JsonNullable() {
    return frequencyPenalty;
  }
  
  @JsonProperty(JSON_PROPERTY_FREQUENCY_PENALTY)
  public void setFrequencyPenalty_JsonNullable(JsonNullable<BigDecimal> frequencyPenalty) {
    this.frequencyPenalty = frequencyPenalty;
  }

  public void setFrequencyPenalty(BigDecimal frequencyPenalty) {
    this.frequencyPenalty = JsonNullable.<BigDecimal>of(frequencyPenalty);
  }


  public CreateChatCompletionRequest logitBias(Map<String, Integer> logitBias) {
    this.logitBias = JsonNullable.<Map<String, Integer>>of(logitBias);
    
    return this;
  }

  public CreateChatCompletionRequest putLogitBiasItem(String key, Integer logitBiasItem) {
    if (this.logitBias == null || !this.logitBias.isPresent()) {
      this.logitBias = JsonNullable.<Map<String, Integer>>of(new HashMap<>());
    }
    try {
      this.logitBias.get().put(key, logitBiasItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

   /**
   * Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. 
   * @return logitBias
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Map<String, Integer> getLogitBias() {
        return logitBias.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOGIT_BIAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Map<String, Integer>> getLogitBias_JsonNullable() {
    return logitBias;
  }
  
  @JsonProperty(JSON_PROPERTY_LOGIT_BIAS)
  public void setLogitBias_JsonNullable(JsonNullable<Map<String, Integer>> logitBias) {
    this.logitBias = logitBias;
  }

  public void setLogitBias(Map<String, Integer> logitBias) {
    this.logitBias = JsonNullable.<Map<String, Integer>>of(logitBias);
  }


  public CreateChatCompletionRequest logprobs(Boolean logprobs) {
    this.logprobs = JsonNullable.<Boolean>of(logprobs);
    
    return this;
  }

   /**
   * Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the &#x60;content&#x60; of &#x60;message&#x60;. This option is currently not available on the &#x60;gpt-4-vision-preview&#x60; model.
   * @return logprobs
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getLogprobs() {
        return logprobs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOGPROBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getLogprobs_JsonNullable() {
    return logprobs;
  }
  
  @JsonProperty(JSON_PROPERTY_LOGPROBS)
  public void setLogprobs_JsonNullable(JsonNullable<Boolean> logprobs) {
    this.logprobs = logprobs;
  }

  public void setLogprobs(Boolean logprobs) {
    this.logprobs = JsonNullable.<Boolean>of(logprobs);
  }


  public CreateChatCompletionRequest topLogprobs(Integer topLogprobs) {
    this.topLogprobs = JsonNullable.<Integer>of(topLogprobs);
    
    return this;
  }

   /**
   * An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. &#x60;logprobs&#x60; must be set to &#x60;true&#x60; if this parameter is used.
   * minimum: 0
   * maximum: 20
   * @return topLogprobs
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getTopLogprobs() {
        return topLogprobs.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOP_LOGPROBS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getTopLogprobs_JsonNullable() {
    return topLogprobs;
  }
  
  @JsonProperty(JSON_PROPERTY_TOP_LOGPROBS)
  public void setTopLogprobs_JsonNullable(JsonNullable<Integer> topLogprobs) {
    this.topLogprobs = topLogprobs;
  }

  public void setTopLogprobs(Integer topLogprobs) {
    this.topLogprobs = JsonNullable.<Integer>of(topLogprobs);
  }


  public CreateChatCompletionRequest maxTokens(Integer maxTokens) {
    this.maxTokens = JsonNullable.<Integer>of(maxTokens);
    
    return this;
  }

   /**
   * The maximum number of [tokens](/tokenizer) that can be generated in the chat completion.  The total length of input tokens and generated tokens is limited by the model&#39;s context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. 
   * @return maxTokens
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getMaxTokens() {
        return maxTokens.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_TOKENS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getMaxTokens_JsonNullable() {
    return maxTokens;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_TOKENS)
  public void setMaxTokens_JsonNullable(JsonNullable<Integer> maxTokens) {
    this.maxTokens = maxTokens;
  }

  public void setMaxTokens(Integer maxTokens) {
    this.maxTokens = JsonNullable.<Integer>of(maxTokens);
  }


  public CreateChatCompletionRequest n(Integer n) {
    this.n = JsonNullable.<Integer>of(n);
    
    return this;
  }

   /**
   * How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep &#x60;n&#x60; as &#x60;1&#x60; to minimize costs.
   * minimum: 1
   * maximum: 128
   * @return n
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getN() {
        return n.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_N)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getN_JsonNullable() {
    return n;
  }
  
  @JsonProperty(JSON_PROPERTY_N)
  public void setN_JsonNullable(JsonNullable<Integer> n) {
    this.n = n;
  }

  public void setN(Integer n) {
    this.n = JsonNullable.<Integer>of(n);
  }


  public CreateChatCompletionRequest presencePenalty(BigDecimal presencePenalty) {
    this.presencePenalty = JsonNullable.<BigDecimal>of(presencePenalty);
    
    return this;
  }

   /**
   * Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model&#39;s likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details) 
   * minimum: -2
   * maximum: 2
   * @return presencePenalty
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getPresencePenalty() {
        return presencePenalty.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PRESENCE_PENALTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getPresencePenalty_JsonNullable() {
    return presencePenalty;
  }
  
  @JsonProperty(JSON_PROPERTY_PRESENCE_PENALTY)
  public void setPresencePenalty_JsonNullable(JsonNullable<BigDecimal> presencePenalty) {
    this.presencePenalty = presencePenalty;
  }

  public void setPresencePenalty(BigDecimal presencePenalty) {
    this.presencePenalty = JsonNullable.<BigDecimal>of(presencePenalty);
  }


  public CreateChatCompletionRequest responseFormat(CreateChatCompletionRequestResponseFormat responseFormat) {
    
    this.responseFormat = responseFormat;
    return this;
  }

   /**
   * Get responseFormat
   * @return responseFormat
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateChatCompletionRequestResponseFormat getResponseFormat() {
    return responseFormat;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_FORMAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseFormat(CreateChatCompletionRequestResponseFormat responseFormat) {
    this.responseFormat = responseFormat;
  }


  public CreateChatCompletionRequest seed(Integer seed) {
    this.seed = JsonNullable.<Integer>of(seed);
    
    return this;
  }

   /**
   * This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same &#x60;seed&#x60; and parameters should return the same result. Determinism is not guaranteed, and you should refer to the &#x60;system_fingerprint&#x60; response parameter to monitor changes in the backend. 
   * minimum: -9223372036854775808
   * maximum: 9223372036854775807
   * @return seed
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Integer getSeed() {
        return seed.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Integer> getSeed_JsonNullable() {
    return seed;
  }
  
  @JsonProperty(JSON_PROPERTY_SEED)
  public void setSeed_JsonNullable(JsonNullable<Integer> seed) {
    this.seed = seed;
  }

  public void setSeed(Integer seed) {
    this.seed = JsonNullable.<Integer>of(seed);
  }


  public CreateChatCompletionRequest stop(CreateChatCompletionRequestStop stop) {
    
    this.stop = stop;
    return this;
  }

   /**
   * Get stop
   * @return stop
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateChatCompletionRequestStop getStop() {
    return stop;
  }


  @JsonProperty(JSON_PROPERTY_STOP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStop(CreateChatCompletionRequestStop stop) {
    this.stop = stop;
  }


  public CreateChatCompletionRequest stream(Boolean stream) {
    this.stream = JsonNullable.<Boolean>of(stream);
    
    return this;
  }

   /**
   * If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a &#x60;data: [DONE]&#x60; message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions). 
   * @return stream
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Boolean getStream() {
        return stream.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STREAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Boolean> getStream_JsonNullable() {
    return stream;
  }
  
  @JsonProperty(JSON_PROPERTY_STREAM)
  public void setStream_JsonNullable(JsonNullable<Boolean> stream) {
    this.stream = stream;
  }

  public void setStream(Boolean stream) {
    this.stream = JsonNullable.<Boolean>of(stream);
  }


  public CreateChatCompletionRequest temperature(BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
    
    return this;
  }

   /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or &#x60;top_p&#x60; but not both. 
   * minimum: 0
   * maximum: 2
   * @return temperature
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTemperature() {
        return temperature.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTemperature_JsonNullable() {
    return temperature;
  }
  
  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  public void setTemperature_JsonNullable(JsonNullable<BigDecimal> temperature) {
    this.temperature = temperature;
  }

  public void setTemperature(BigDecimal temperature) {
    this.temperature = JsonNullable.<BigDecimal>of(temperature);
  }


  public CreateChatCompletionRequest topP(BigDecimal topP) {
    this.topP = JsonNullable.<BigDecimal>of(topP);
    
    return this;
  }

   /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or &#x60;temperature&#x60; but not both. 
   * minimum: 0
   * maximum: 1
   * @return topP
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public BigDecimal getTopP() {
        return topP.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TOP_P)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<BigDecimal> getTopP_JsonNullable() {
    return topP;
  }
  
  @JsonProperty(JSON_PROPERTY_TOP_P)
  public void setTopP_JsonNullable(JsonNullable<BigDecimal> topP) {
    this.topP = topP;
  }

  public void setTopP(BigDecimal topP) {
    this.topP = JsonNullable.<BigDecimal>of(topP);
  }


  public CreateChatCompletionRequest tools(List<ChatCompletionTool> tools) {
    
    this.tools = tools;
    return this;
  }

  public CreateChatCompletionRequest addToolsItem(ChatCompletionTool toolsItem) {
    if (this.tools == null) {
      this.tools = new ArrayList<>();
    }
    this.tools.add(toolsItem);
    return this;
  }

   /**
   * A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. 
   * @return tools
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ChatCompletionTool> getTools() {
    return tools;
  }


  @JsonProperty(JSON_PROPERTY_TOOLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTools(List<ChatCompletionTool> tools) {
    this.tools = tools;
  }


  public CreateChatCompletionRequest toolChoice(ChatCompletionToolChoiceOption toolChoice) {
    
    this.toolChoice = toolChoice;
    return this;
  }

   /**
   * Get toolChoice
   * @return toolChoice
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ChatCompletionToolChoiceOption getToolChoice() {
    return toolChoice;
  }


  @JsonProperty(JSON_PROPERTY_TOOL_CHOICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToolChoice(ChatCompletionToolChoiceOption toolChoice) {
    this.toolChoice = toolChoice;
  }


  public CreateChatCompletionRequest user(String user) {
    
    this.user = user;
    return this;
  }

   /**
   * A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). 
   * @return user
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
  }


  public CreateChatCompletionRequest functionCall(CreateChatCompletionRequestFunctionCall functionCall) {
    
    this.functionCall = functionCall;
    return this;
  }

   /**
   * Get functionCall
   * @return functionCall
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUNCTION_CALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateChatCompletionRequestFunctionCall getFunctionCall() {
    return functionCall;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTION_CALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunctionCall(CreateChatCompletionRequestFunctionCall functionCall) {
    this.functionCall = functionCall;
  }


  public CreateChatCompletionRequest functions(List<ChatCompletionFunctions> functions) {
    
    this.functions = functions;
    return this;
  }

  public CreateChatCompletionRequest addFunctionsItem(ChatCompletionFunctions functionsItem) {
    if (this.functions == null) {
      this.functions = new ArrayList<>();
    }
    this.functions.add(functionsItem);
    return this;
  }

   /**
   * Deprecated in favor of &#x60;tools&#x60;.  A list of functions the model may generate JSON inputs for. 
   * @return functions
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FUNCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ChatCompletionFunctions> getFunctions() {
    return functions;
  }


  @JsonProperty(JSON_PROPERTY_FUNCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFunctions(List<ChatCompletionFunctions> functions) {
    this.functions = functions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateChatCompletionRequest createChatCompletionRequest = (CreateChatCompletionRequest) o;
    return Objects.equals(this.messages, createChatCompletionRequest.messages) &&
        Objects.equals(this.model, createChatCompletionRequest.model) &&
        equalsNullable(this.frequencyPenalty, createChatCompletionRequest.frequencyPenalty) &&
        equalsNullable(this.logitBias, createChatCompletionRequest.logitBias) &&
        equalsNullable(this.logprobs, createChatCompletionRequest.logprobs) &&
        equalsNullable(this.topLogprobs, createChatCompletionRequest.topLogprobs) &&
        equalsNullable(this.maxTokens, createChatCompletionRequest.maxTokens) &&
        equalsNullable(this.n, createChatCompletionRequest.n) &&
        equalsNullable(this.presencePenalty, createChatCompletionRequest.presencePenalty) &&
        Objects.equals(this.responseFormat, createChatCompletionRequest.responseFormat) &&
        equalsNullable(this.seed, createChatCompletionRequest.seed) &&
        Objects.equals(this.stop, createChatCompletionRequest.stop) &&
        equalsNullable(this.stream, createChatCompletionRequest.stream) &&
        equalsNullable(this.temperature, createChatCompletionRequest.temperature) &&
        equalsNullable(this.topP, createChatCompletionRequest.topP) &&
        Objects.equals(this.tools, createChatCompletionRequest.tools) &&
        Objects.equals(this.toolChoice, createChatCompletionRequest.toolChoice) &&
        Objects.equals(this.user, createChatCompletionRequest.user) &&
        Objects.equals(this.functionCall, createChatCompletionRequest.functionCall) &&
        Objects.equals(this.functions, createChatCompletionRequest.functions);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(messages, model, hashCodeNullable(frequencyPenalty), hashCodeNullable(logitBias), hashCodeNullable(logprobs), hashCodeNullable(topLogprobs), hashCodeNullable(maxTokens), hashCodeNullable(n), hashCodeNullable(presencePenalty), responseFormat, hashCodeNullable(seed), stop, hashCodeNullable(stream), hashCodeNullable(temperature), hashCodeNullable(topP), tools, toolChoice, user, functionCall, functions);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateChatCompletionRequest {\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    frequencyPenalty: ").append(toIndentedString(frequencyPenalty)).append("\n");
    sb.append("    logitBias: ").append(toIndentedString(logitBias)).append("\n");
    sb.append("    logprobs: ").append(toIndentedString(logprobs)).append("\n");
    sb.append("    topLogprobs: ").append(toIndentedString(topLogprobs)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    n: ").append(toIndentedString(n)).append("\n");
    sb.append("    presencePenalty: ").append(toIndentedString(presencePenalty)).append("\n");
    sb.append("    responseFormat: ").append(toIndentedString(responseFormat)).append("\n");
    sb.append("    seed: ").append(toIndentedString(seed)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    tools: ").append(toIndentedString(tools)).append("\n");
    sb.append("    toolChoice: ").append(toIndentedString(toolChoice)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    functionCall: ").append(toIndentedString(functionCall)).append("\n");
    sb.append("    functions: ").append(toIndentedString(functions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `messages` to the URL query string
    if (getMessages() != null) {
      for (int i = 0; i < getMessages().size(); i++) {
        if (getMessages().get(i) != null) {
          joiner.add(getMessages().get(i).toUrlQueryString(String.format("%smessages%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `model` to the URL query string
    if (getModel() != null) {
      joiner.add(getModel().toUrlQueryString(prefix + "model" + suffix));
    }

    // add `frequency_penalty` to the URL query string
    if (getFrequencyPenalty() != null) {
      try {
        joiner.add(String.format("%sfrequency_penalty%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFrequencyPenalty()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `logit_bias` to the URL query string
    if (getLogitBias() != null) {
      for (String _key : getLogitBias().keySet()) {
        try {
          joiner.add(String.format("%slogit_bias%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, _key, containerSuffix),
              getLogitBias().get(_key), URLEncoder.encode(String.valueOf(getLogitBias().get(_key)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `logprobs` to the URL query string
    if (getLogprobs() != null) {
      try {
        joiner.add(String.format("%slogprobs%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getLogprobs()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `top_logprobs` to the URL query string
    if (getTopLogprobs() != null) {
      try {
        joiner.add(String.format("%stop_logprobs%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTopLogprobs()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `max_tokens` to the URL query string
    if (getMaxTokens() != null) {
      try {
        joiner.add(String.format("%smax_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getMaxTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `n` to the URL query string
    if (getN() != null) {
      try {
        joiner.add(String.format("%sn%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getN()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `presence_penalty` to the URL query string
    if (getPresencePenalty() != null) {
      try {
        joiner.add(String.format("%spresence_penalty%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getPresencePenalty()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `response_format` to the URL query string
    if (getResponseFormat() != null) {
      joiner.add(getResponseFormat().toUrlQueryString(prefix + "response_format" + suffix));
    }

    // add `seed` to the URL query string
    if (getSeed() != null) {
      try {
        joiner.add(String.format("%sseed%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSeed()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `stop` to the URL query string
    if (getStop() != null) {
      joiner.add(getStop().toUrlQueryString(prefix + "stop" + suffix));
    }

    // add `stream` to the URL query string
    if (getStream() != null) {
      try {
        joiner.add(String.format("%sstream%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStream()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `temperature` to the URL query string
    if (getTemperature() != null) {
      try {
        joiner.add(String.format("%stemperature%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTemperature()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `top_p` to the URL query string
    if (getTopP() != null) {
      try {
        joiner.add(String.format("%stop_p%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTopP()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `tools` to the URL query string
    if (getTools() != null) {
      for (int i = 0; i < getTools().size(); i++) {
        if (getTools().get(i) != null) {
          joiner.add(getTools().get(i).toUrlQueryString(String.format("%stools%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `tool_choice` to the URL query string
    if (getToolChoice() != null) {
      joiner.add(getToolChoice().toUrlQueryString(prefix + "tool_choice" + suffix));
    }

    // add `user` to the URL query string
    if (getUser() != null) {
      try {
        joiner.add(String.format("%suser%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getUser()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `function_call` to the URL query string
    if (getFunctionCall() != null) {
      joiner.add(getFunctionCall().toUrlQueryString(prefix + "function_call" + suffix));
    }

    // add `functions` to the URL query string
    if (getFunctions() != null) {
      for (int i = 0; i < getFunctions().size(); i++) {
        if (getFunctions().get(i) != null) {
          joiner.add(getFunctions().get(i).toUrlQueryString(String.format("%sfunctions%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }

}

