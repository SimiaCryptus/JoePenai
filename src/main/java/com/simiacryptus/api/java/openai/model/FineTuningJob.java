/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.openai.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.simiacryptus.api.java.openai.model.FineTuningJobError;
import com.simiacryptus.api.java.openai.model.FineTuningJobHyperparameters;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * The &#x60;fine_tuning.job&#x60; object represents a fine-tuning job that has been created through the API. 
 */
@JsonPropertyOrder({
  FineTuningJob.JSON_PROPERTY_ID,
  FineTuningJob.JSON_PROPERTY_CREATED_AT,
  FineTuningJob.JSON_PROPERTY_ERROR,
  FineTuningJob.JSON_PROPERTY_FINE_TUNED_MODEL,
  FineTuningJob.JSON_PROPERTY_FINISHED_AT,
  FineTuningJob.JSON_PROPERTY_HYPERPARAMETERS,
  FineTuningJob.JSON_PROPERTY_MODEL,
  FineTuningJob.JSON_PROPERTY_OBJECT,
  FineTuningJob.JSON_PROPERTY_ORGANIZATION_ID,
  FineTuningJob.JSON_PROPERTY_RESULT_FILES,
  FineTuningJob.JSON_PROPERTY_STATUS,
  FineTuningJob.JSON_PROPERTY_TRAINED_TOKENS,
  FineTuningJob.JSON_PROPERTY_TRAINING_FILE,
  FineTuningJob.JSON_PROPERTY_VALIDATION_FILE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:24:46.732753800-05:00[America/New_York]")
public class FineTuningJob {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Integer createdAt;

  public static final String JSON_PROPERTY_ERROR = "error";
  private FineTuningJobError error;

  public static final String JSON_PROPERTY_FINE_TUNED_MODEL = "fine_tuned_model";
  private String fineTunedModel;

  public static final String JSON_PROPERTY_FINISHED_AT = "finished_at";
  private Integer finishedAt;

  public static final String JSON_PROPERTY_HYPERPARAMETERS = "hyperparameters";
  private FineTuningJobHyperparameters hyperparameters;

  public static final String JSON_PROPERTY_MODEL = "model";
  private String model;

  /**
   * The object type, which is always \&quot;fine_tuning.job\&quot;.
   */
  public enum ObjectEnum {
    FINE_TUNING_JOB("fine_tuning.job");

    private String value;

    ObjectEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ObjectEnum fromValue(String value) {
      for (ObjectEnum b : ObjectEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_OBJECT = "object";
  private ObjectEnum _object;

  public static final String JSON_PROPERTY_ORGANIZATION_ID = "organization_id";
  private String organizationId;

  public static final String JSON_PROPERTY_RESULT_FILES = "result_files";
  private List<String> resultFiles = new ArrayList<>();

  /**
   * The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
   */
  public enum StatusEnum {
    VALIDATING_FILES("validating_files"),
    
    QUEUED("queued"),
    
    RUNNING("running"),
    
    SUCCEEDED("succeeded"),
    
    FAILED("failed"),
    
    CANCELLED("cancelled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_TRAINED_TOKENS = "trained_tokens";
  private Integer trainedTokens;

  public static final String JSON_PROPERTY_TRAINING_FILE = "training_file";
  private String trainingFile;

  public static final String JSON_PROPERTY_VALIDATION_FILE = "validation_file";
  private String validationFile;

  public FineTuningJob() {
  }

  public FineTuningJob id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The object identifier, which can be referenced in the API endpoints.
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public FineTuningJob createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The Unix timestamp (in seconds) for when the fine-tuning job was created.
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public FineTuningJob error(FineTuningJobError error) {
    
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FineTuningJobError getError() {
    return error;
  }


  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setError(FineTuningJobError error) {
    this.error = error;
  }


  public FineTuningJob fineTunedModel(String fineTunedModel) {
    
    this.fineTunedModel = fineTunedModel;
    return this;
  }

   /**
   * The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
   * @return fineTunedModel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINE_TUNED_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFineTunedModel() {
    return fineTunedModel;
  }


  @JsonProperty(JSON_PROPERTY_FINE_TUNED_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFineTunedModel(String fineTunedModel) {
    this.fineTunedModel = fineTunedModel;
  }


  public FineTuningJob finishedAt(Integer finishedAt) {
    
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
   * @return finishedAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINISHED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFinishedAt() {
    return finishedAt;
  }


  @JsonProperty(JSON_PROPERTY_FINISHED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFinishedAt(Integer finishedAt) {
    this.finishedAt = finishedAt;
  }


  public FineTuningJob hyperparameters(FineTuningJobHyperparameters hyperparameters) {
    
    this.hyperparameters = hyperparameters;
    return this;
  }

   /**
   * Get hyperparameters
   * @return hyperparameters
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HYPERPARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public FineTuningJobHyperparameters getHyperparameters() {
    return hyperparameters;
  }


  @JsonProperty(JSON_PROPERTY_HYPERPARAMETERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHyperparameters(FineTuningJobHyperparameters hyperparameters) {
    this.hyperparameters = hyperparameters;
  }


  public FineTuningJob model(String model) {
    
    this.model = model;
    return this;
  }

   /**
   * The base model that is being fine-tuned.
   * @return model
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModel(String model) {
    this.model = model;
  }


  public FineTuningJob _object(ObjectEnum _object) {
    
    this._object = _object;
    return this;
  }

   /**
   * The object type, which is always \&quot;fine_tuning.job\&quot;.
   * @return _object
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ObjectEnum getObject() {
    return _object;
  }


  @JsonProperty(JSON_PROPERTY_OBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setObject(ObjectEnum _object) {
    this._object = _object;
  }


  public FineTuningJob organizationId(String organizationId) {
    
    this.organizationId = organizationId;
    return this;
  }

   /**
   * The organization that owns the fine-tuning job.
   * @return organizationId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORGANIZATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOrganizationId() {
    return organizationId;
  }


  @JsonProperty(JSON_PROPERTY_ORGANIZATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }


  public FineTuningJob resultFiles(List<String> resultFiles) {
    
    this.resultFiles = resultFiles;
    return this;
  }

  public FineTuningJob addResultFilesItem(String resultFilesItem) {
    if (this.resultFiles == null) {
      this.resultFiles = new ArrayList<>();
    }
    this.resultFiles.add(resultFilesItem);
    return this;
  }

   /**
   * The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
   * @return resultFiles
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESULT_FILES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getResultFiles() {
    return resultFiles;
  }


  @JsonProperty(JSON_PROPERTY_RESULT_FILES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResultFiles(List<String> resultFiles) {
    this.resultFiles = resultFiles;
  }


  public FineTuningJob status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The current status of the fine-tuning job, which can be either &#x60;validating_files&#x60;, &#x60;queued&#x60;, &#x60;running&#x60;, &#x60;succeeded&#x60;, &#x60;failed&#x60;, or &#x60;cancelled&#x60;.
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public FineTuningJob trainedTokens(Integer trainedTokens) {
    
    this.trainedTokens = trainedTokens;
    return this;
  }

   /**
   * The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
   * @return trainedTokens
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRAINED_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTrainedTokens() {
    return trainedTokens;
  }


  @JsonProperty(JSON_PROPERTY_TRAINED_TOKENS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTrainedTokens(Integer trainedTokens) {
    this.trainedTokens = trainedTokens;
  }


  public FineTuningJob trainingFile(String trainingFile) {
    
    this.trainingFile = trainingFile;
    return this;
  }

   /**
   * The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
   * @return trainingFile
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRAINING_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTrainingFile() {
    return trainingFile;
  }


  @JsonProperty(JSON_PROPERTY_TRAINING_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTrainingFile(String trainingFile) {
    this.trainingFile = trainingFile;
  }


  public FineTuningJob validationFile(String validationFile) {
    
    this.validationFile = validationFile;
    return this;
  }

   /**
   * The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
   * @return validationFile
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VALIDATION_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getValidationFile() {
    return validationFile;
  }


  @JsonProperty(JSON_PROPERTY_VALIDATION_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValidationFile(String validationFile) {
    this.validationFile = validationFile;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FineTuningJob fineTuningJob = (FineTuningJob) o;
    return Objects.equals(this.id, fineTuningJob.id) &&
        Objects.equals(this.createdAt, fineTuningJob.createdAt) &&
        Objects.equals(this.error, fineTuningJob.error) &&
        Objects.equals(this.fineTunedModel, fineTuningJob.fineTunedModel) &&
        Objects.equals(this.finishedAt, fineTuningJob.finishedAt) &&
        Objects.equals(this.hyperparameters, fineTuningJob.hyperparameters) &&
        Objects.equals(this.model, fineTuningJob.model) &&
        Objects.equals(this._object, fineTuningJob._object) &&
        Objects.equals(this.organizationId, fineTuningJob.organizationId) &&
        Objects.equals(this.resultFiles, fineTuningJob.resultFiles) &&
        Objects.equals(this.status, fineTuningJob.status) &&
        Objects.equals(this.trainedTokens, fineTuningJob.trainedTokens) &&
        Objects.equals(this.trainingFile, fineTuningJob.trainingFile) &&
        Objects.equals(this.validationFile, fineTuningJob.validationFile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, error, fineTunedModel, finishedAt, hyperparameters, model, _object, organizationId, resultFiles, status, trainedTokens, trainingFile, validationFile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FineTuningJob {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    fineTunedModel: ").append(toIndentedString(fineTunedModel)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    hyperparameters: ").append(toIndentedString(hyperparameters)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    _object: ").append(toIndentedString(_object)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    resultFiles: ").append(toIndentedString(resultFiles)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trainedTokens: ").append(toIndentedString(trainedTokens)).append("\n");
    sb.append("    trainingFile: ").append(toIndentedString(trainingFile)).append("\n");
    sb.append("    validationFile: ").append(toIndentedString(validationFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      try {
        joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `created_at` to the URL query string
    if (getCreatedAt() != null) {
      try {
        joiner.add(String.format("%screated_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getCreatedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `error` to the URL query string
    if (getError() != null) {
      joiner.add(getError().toUrlQueryString(prefix + "error" + suffix));
    }

    // add `fine_tuned_model` to the URL query string
    if (getFineTunedModel() != null) {
      try {
        joiner.add(String.format("%sfine_tuned_model%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFineTunedModel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `finished_at` to the URL query string
    if (getFinishedAt() != null) {
      try {
        joiner.add(String.format("%sfinished_at%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getFinishedAt()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `hyperparameters` to the URL query string
    if (getHyperparameters() != null) {
      joiner.add(getHyperparameters().toUrlQueryString(prefix + "hyperparameters" + suffix));
    }

    // add `model` to the URL query string
    if (getModel() != null) {
      try {
        joiner.add(String.format("%smodel%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getModel()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `object` to the URL query string
    if (getObject() != null) {
      try {
        joiner.add(String.format("%sobject%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getObject()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `organization_id` to the URL query string
    if (getOrganizationId() != null) {
      try {
        joiner.add(String.format("%sorganization_id%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getOrganizationId()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `result_files` to the URL query string
    if (getResultFiles() != null) {
      for (int i = 0; i < getResultFiles().size(); i++) {
        try {
          joiner.add(String.format("%sresult_files%s%s=%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
              URLEncoder.encode(String.valueOf(getResultFiles().get(i)), "UTF-8").replaceAll("\\+", "%20")));
        } catch (UnsupportedEncodingException e) {
          // Should never happen, UTF-8 is always supported
          throw new RuntimeException(e);
        }
      }
    }

    // add `status` to the URL query string
    if (getStatus() != null) {
      try {
        joiner.add(String.format("%sstatus%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getStatus()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `trained_tokens` to the URL query string
    if (getTrainedTokens() != null) {
      try {
        joiner.add(String.format("%strained_tokens%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTrainedTokens()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `training_file` to the URL query string
    if (getTrainingFile() != null) {
      try {
        joiner.add(String.format("%straining_file%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTrainingFile()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `validation_file` to the URL query string
    if (getValidationFile() != null) {
      try {
        joiner.add(String.format("%svalidation_file%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getValidationFile()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

