/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.simiacryptus.api.java.openai;

import com.fasterxml.jackson.core.type.TypeReference;

import com.simiacryptus.api.java.ApiException;
import com.simiacryptus.api.java.ApiClient;
import com.simiacryptus.api.java.Configuration;
import com.simiacryptus.api.java.Pair;

import com.simiacryptus.api.java.openai.model.CreateFineTuningJobRequest;
import com.simiacryptus.api.java.openai.model.FineTuningJob;
import com.simiacryptus.api.java.openai.model.ListFineTuningJobEventsResponse;
import com.simiacryptus.api.java.openai.model.ListPaginatedFineTuningJobsResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:24:46.732753800-05:00[America/New_York]")
public class FineTuningApi {


  private ApiClient apiClient;

  public FineTuningApi() {
    this(Configuration.getDefaultApiClient());
  }

  public FineTuningApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Immediately cancel a fine-tune job. 
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to cancel.  (required)
   * @return FineTuningJob
   * @throws ApiException if fails to make API call
   */
  public FineTuningJob cancelFineTuningJob(String fineTuningJobId) throws ApiException {
    return this.cancelFineTuningJob(fineTuningJobId, Collections.emptyMap());
  }


  /**
   * Immediately cancel a fine-tune job. 
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to cancel.  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return FineTuningJob
   * @throws ApiException if fails to make API call
   */
  public FineTuningJob cancelFineTuningJob(String fineTuningJobId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      throw new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling cancelFineTuningJob");
    }
    
    // create path and map variables
    String localVarPath = "/fine_tuning/jobs/{fine_tuning_job_id}/cancel"
      .replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiClient.escapeString(fineTuningJobId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<FineTuningJob> localVarReturnType = new TypeReference<FineTuningJob>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
   * 
   * @param createFineTuningJobRequest  (required)
   * @return FineTuningJob
   * @throws ApiException if fails to make API call
   */
  public FineTuningJob createFineTuningJob(CreateFineTuningJobRequest createFineTuningJobRequest) throws ApiException {
    return this.createFineTuningJob(createFineTuningJobRequest, Collections.emptyMap());
  }


  /**
   * Creates a fine-tuning job which begins the process of creating a new model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
   * 
   * @param createFineTuningJobRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return FineTuningJob
   * @throws ApiException if fails to make API call
   */
  public FineTuningJob createFineTuningJob(CreateFineTuningJobRequest createFineTuningJobRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createFineTuningJobRequest;
    
    // verify the required parameter 'createFineTuningJobRequest' is set
    if (createFineTuningJobRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createFineTuningJobRequest' when calling createFineTuningJob");
    }
    
    // create path and map variables
    String localVarPath = "/fine_tuning/jobs";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<FineTuningJob> localVarReturnType = new TypeReference<FineTuningJob>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get status updates for a fine-tuning job. 
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to get events for.  (required)
   * @param after Identifier for the last event from the previous pagination request. (optional)
   * @param limit Number of events to retrieve. (optional, default to 20)
   * @return ListFineTuningJobEventsResponse
   * @throws ApiException if fails to make API call
   */
  public ListFineTuningJobEventsResponse listFineTuningEvents(String fineTuningJobId, String after, Integer limit) throws ApiException {
    return this.listFineTuningEvents(fineTuningJobId, after, limit, Collections.emptyMap());
  }


  /**
   * Get status updates for a fine-tuning job. 
   * 
   * @param fineTuningJobId The ID of the fine-tuning job to get events for.  (required)
   * @param after Identifier for the last event from the previous pagination request. (optional)
   * @param limit Number of events to retrieve. (optional, default to 20)
   * @param additionalHeaders additionalHeaders for this call
   * @return ListFineTuningJobEventsResponse
   * @throws ApiException if fails to make API call
   */
  public ListFineTuningJobEventsResponse listFineTuningEvents(String fineTuningJobId, String after, Integer limit, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      throw new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling listFineTuningEvents");
    }
    
    // create path and map variables
    String localVarPath = "/fine_tuning/jobs/{fine_tuning_job_id}/events"
      .replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiClient.escapeString(fineTuningJobId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ListFineTuningJobEventsResponse> localVarReturnType = new TypeReference<ListFineTuningJobEventsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * List your organization&#39;s fine-tuning jobs 
   * 
   * @param after Identifier for the last job from the previous pagination request. (optional)
   * @param limit Number of fine-tuning jobs to retrieve. (optional, default to 20)
   * @return ListPaginatedFineTuningJobsResponse
   * @throws ApiException if fails to make API call
   */
  public ListPaginatedFineTuningJobsResponse listPaginatedFineTuningJobs(String after, Integer limit) throws ApiException {
    return this.listPaginatedFineTuningJobs(after, limit, Collections.emptyMap());
  }


  /**
   * List your organization&#39;s fine-tuning jobs 
   * 
   * @param after Identifier for the last job from the previous pagination request. (optional)
   * @param limit Number of fine-tuning jobs to retrieve. (optional, default to 20)
   * @param additionalHeaders additionalHeaders for this call
   * @return ListPaginatedFineTuningJobsResponse
   * @throws ApiException if fails to make API call
   */
  public ListPaginatedFineTuningJobsResponse listPaginatedFineTuningJobs(String after, Integer limit, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // create path and map variables
    String localVarPath = "/fine_tuning/jobs";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("after", after));
    localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<ListPaginatedFineTuningJobsResponse> localVarReturnType = new TypeReference<ListPaginatedFineTuningJobsResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  /**
   * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
   * 
   * @param fineTuningJobId The ID of the fine-tuning job.  (required)
   * @return FineTuningJob
   * @throws ApiException if fails to make API call
   */
  public FineTuningJob retrieveFineTuningJob(String fineTuningJobId) throws ApiException {
    return this.retrieveFineTuningJob(fineTuningJobId, Collections.emptyMap());
  }


  /**
   * Get info about a fine-tuning job.  [Learn more about fine-tuning](/docs/guides/fine-tuning) 
   * 
   * @param fineTuningJobId The ID of the fine-tuning job.  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return FineTuningJob
   * @throws ApiException if fails to make API call
   */
  public FineTuningJob retrieveFineTuningJob(String fineTuningJobId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'fineTuningJobId' is set
    if (fineTuningJobId == null) {
      throw new ApiException(400, "Missing the required parameter 'fineTuningJobId' when calling retrieveFineTuningJob");
    }
    
    // create path and map variables
    String localVarPath = "/fine_tuning/jobs/{fine_tuning_job_id}"
      .replaceAll("\\{" + "fine_tuning_job_id" + "\\}", apiClient.escapeString(fineTuningJobId.toString()));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] { "ApiKeyAuth" };

    TypeReference<FineTuningJob> localVarReturnType = new TypeReference<FineTuningJob>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

}
