/*
 * OpenAI API
 * The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.openai.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.simiacryptus.api.java.openai.model.CreateFineTuningJobRequestHyperparameters;
import com.simiacryptus.api.java.openai.model.CreateFineTuningJobRequestModel;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.StringJoiner;

/**
 * CreateFineTuningJobRequest
 */
@JsonPropertyOrder({
  CreateFineTuningJobRequest.JSON_PROPERTY_MODEL,
  CreateFineTuningJobRequest.JSON_PROPERTY_TRAINING_FILE,
  CreateFineTuningJobRequest.JSON_PROPERTY_HYPERPARAMETERS,
  CreateFineTuningJobRequest.JSON_PROPERTY_SUFFIX,
  CreateFineTuningJobRequest.JSON_PROPERTY_VALIDATION_FILE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-09T16:24:46.732753800-05:00[America/New_York]")
public class CreateFineTuningJobRequest {
  public static final String JSON_PROPERTY_MODEL = "model";
  private CreateFineTuningJobRequestModel model;

  public static final String JSON_PROPERTY_TRAINING_FILE = "training_file";
  private String trainingFile;

  public static final String JSON_PROPERTY_HYPERPARAMETERS = "hyperparameters";
  private CreateFineTuningJobRequestHyperparameters hyperparameters;

  public static final String JSON_PROPERTY_SUFFIX = "suffix";
  private JsonNullable<String> suffix = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_VALIDATION_FILE = "validation_file";
  private JsonNullable<String> validationFile = JsonNullable.<String>undefined();

  public CreateFineTuningJobRequest() {
  }

  public CreateFineTuningJobRequest model(CreateFineTuningJobRequestModel model) {
    
    this.model = model;
    return this;
  }

   /**
   * Get model
   * @return model
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CreateFineTuningJobRequestModel getModel() {
    return model;
  }


  @JsonProperty(JSON_PROPERTY_MODEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setModel(CreateFineTuningJobRequestModel model) {
    this.model = model;
  }


  public CreateFineTuningJobRequest trainingFile(String trainingFile) {
    
    this.trainingFile = trainingFile;
    return this;
  }

   /**
   * The ID of an uploaded file that contains training data.  See [upload file](/docs/api-reference/files/upload) for how to upload a file.  Your dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
   * @return trainingFile
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRAINING_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTrainingFile() {
    return trainingFile;
  }


  @JsonProperty(JSON_PROPERTY_TRAINING_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTrainingFile(String trainingFile) {
    this.trainingFile = trainingFile;
  }


  public CreateFineTuningJobRequest hyperparameters(CreateFineTuningJobRequestHyperparameters hyperparameters) {
    
    this.hyperparameters = hyperparameters;
    return this;
  }

   /**
   * Get hyperparameters
   * @return hyperparameters
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HYPERPARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CreateFineTuningJobRequestHyperparameters getHyperparameters() {
    return hyperparameters;
  }


  @JsonProperty(JSON_PROPERTY_HYPERPARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHyperparameters(CreateFineTuningJobRequestHyperparameters hyperparameters) {
    this.hyperparameters = hyperparameters;
  }


  public CreateFineTuningJobRequest suffix(String suffix) {
    this.suffix = JsonNullable.<String>of(suffix);
    
    return this;
  }

   /**
   * A string of up to 18 characters that will be added to your fine-tuned model name.  For example, a &#x60;suffix&#x60; of \&quot;custom-model-name\&quot; would produce a model name like &#x60;ft:gpt-3.5-turbo:openai:custom-model-name:7p4lURel&#x60;. 
   * @return suffix
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getSuffix() {
        return suffix.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUFFIX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getSuffix_JsonNullable() {
    return suffix;
  }
  
  @JsonProperty(JSON_PROPERTY_SUFFIX)
  public void setSuffix_JsonNullable(JsonNullable<String> suffix) {
    this.suffix = suffix;
  }

  public void setSuffix(String suffix) {
    this.suffix = JsonNullable.<String>of(suffix);
  }


  public CreateFineTuningJobRequest validationFile(String validationFile) {
    this.validationFile = JsonNullable.<String>of(validationFile);
    
    return this;
  }

   /**
   * The ID of an uploaded file that contains validation data.  If you provide this file, the data is used to generate validation metrics periodically during fine-tuning. These metrics can be viewed in the fine-tuning results file. The same data should not be present in both train and validation files.  Your dataset must be formatted as a JSONL file. You must upload your file with the purpose &#x60;fine-tune&#x60;.  See the [fine-tuning guide](/docs/guides/fine-tuning) for more details. 
   * @return validationFile
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getValidationFile() {
        return validationFile.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VALIDATION_FILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getValidationFile_JsonNullable() {
    return validationFile;
  }
  
  @JsonProperty(JSON_PROPERTY_VALIDATION_FILE)
  public void setValidationFile_JsonNullable(JsonNullable<String> validationFile) {
    this.validationFile = validationFile;
  }

  public void setValidationFile(String validationFile) {
    this.validationFile = JsonNullable.<String>of(validationFile);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateFineTuningJobRequest createFineTuningJobRequest = (CreateFineTuningJobRequest) o;
    return Objects.equals(this.model, createFineTuningJobRequest.model) &&
        Objects.equals(this.trainingFile, createFineTuningJobRequest.trainingFile) &&
        Objects.equals(this.hyperparameters, createFineTuningJobRequest.hyperparameters) &&
        equalsNullable(this.suffix, createFineTuningJobRequest.suffix) &&
        equalsNullable(this.validationFile, createFineTuningJobRequest.validationFile);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(model, trainingFile, hyperparameters, hashCodeNullable(suffix), hashCodeNullable(validationFile));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateFineTuningJobRequest {\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    trainingFile: ").append(toIndentedString(trainingFile)).append("\n");
    sb.append("    hyperparameters: ").append(toIndentedString(hyperparameters)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    validationFile: ").append(toIndentedString(validationFile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `model` to the URL query string
    if (getModel() != null) {
      joiner.add(getModel().toUrlQueryString(prefix + "model" + suffix));
    }

    // add `training_file` to the URL query string
    if (getTrainingFile() != null) {
      try {
        joiner.add(String.format("%straining_file%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getTrainingFile()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `hyperparameters` to the URL query string
    if (getHyperparameters() != null) {
      joiner.add(getHyperparameters().toUrlQueryString(prefix + "hyperparameters" + suffix));
    }

    // add `suffix` to the URL query string
    if (getSuffix() != null) {
      try {
        joiner.add(String.format("%ssuffix%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getSuffix()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    // add `validation_file` to the URL query string
    if (getValidationFile() != null) {
      try {
        joiner.add(String.format("%svalidation_file%s=%s", prefix, suffix, URLEncoder.encode(String.valueOf(getValidationFile()), "UTF-8").replaceAll("\\+", "%20")));
      } catch (UnsupportedEncodingException e) {
        // Should never happen, UTF-8 is always supported
        throw new RuntimeException(e);
      }
    }

    return joiner.toString();
  }

}

