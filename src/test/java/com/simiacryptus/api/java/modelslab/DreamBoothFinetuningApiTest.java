/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab;

import com.simiacryptus.api.java.ApiException;
import com.simiacryptus.api.java.modelslab.model.CreateDreamboothRequest200Response;
import com.simiacryptus.api.java.modelslab.model.CreateDreamboothRequestRequest;
import com.simiacryptus.api.java.modelslab.model.FetchQueuedImagesRequest;
import com.simiacryptus.api.java.modelslab.model.GetTrainingStatus200Response;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DreamBoothFinetuningApi
 */
@Ignore
public class DreamBoothFinetuningApiTest {

    private final DreamBoothFinetuningApi api = new DreamBoothFinetuningApi();

    /**
     * Cancle Training
     *
     * Cancle Training
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancleTrainingTest() throws ApiException {
        FetchQueuedImagesRequest fetchQueuedImagesRequest = null;
        api.cancleTraining(fetchQueuedImagesRequest);

        // TODO: test validations
    }
    /**
     * Create Dreambooth Request
     *
     * **instance_prompt**: how you want to call trained object  **class_prompt**: class without prompt  **images**: make sure images are direct links, cropped in 512x512 : keep it about 7-8 images  **seed**: keep it null or 0  **training_type**: type of object you are training on:  1. men : to train on faces of men 2. female: to train on faces of female 3. null: to train on object or anything       **max_train_steps**: keep it 2X number of images: Max: 2000  **webhook**: get post call when training is completed
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDreamboothRequestTest() throws ApiException {
        CreateDreamboothRequestRequest createDreamboothRequestRequest = null;
        CreateDreamboothRequest200Response response = api.createDreamboothRequest(createDreamboothRequestRequest);

        // TODO: test validations
    }
    /**
     * Delete Drembooth Model
     *
     * Delete Drembooth Model
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteDremboothModelTest() throws ApiException {
        FetchQueuedImagesRequest fetchQueuedImagesRequest = null;
        api.deleteDremboothModel(fetchQueuedImagesRequest);

        // TODO: test validations
    }
    /**
     * Get Training Status
     *
     * Get Training Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrainingStatusTest() throws ApiException {
        FetchQueuedImagesRequest fetchQueuedImagesRequest = null;
        GetTrainingStatus200Response response = api.getTrainingStatus(fetchQueuedImagesRequest);

        // TODO: test validations
    }
}
