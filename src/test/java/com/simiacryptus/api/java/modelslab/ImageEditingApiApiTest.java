/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab;

import com.simiacryptus.api.java.ApiException;
import com.simiacryptus.api.java.modelslab.model.BackgroundRemovalRequest;
import com.simiacryptus.api.java.modelslab.model.BlipDiffusionRequest;
import com.simiacryptus.api.java.modelslab.model.Depth2imgRequest;
import com.simiacryptus.api.java.modelslab.model.GroundedSegmentImageRequest;
import com.simiacryptus.api.java.modelslab.model.ImageMixerRequest;
import com.simiacryptus.api.java.modelslab.model.MagicMixRequest;
import com.simiacryptus.api.java.modelslab.model.MixtureCanvasRequest;
import com.simiacryptus.api.java.modelslab.model.OutpaintingRequest;
import com.simiacryptus.api.java.modelslab.model.SuperResolutionRequest;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImageEditingApiApi
 */
@Ignore
public class ImageEditingApiApiTest {

    private final ImageEditingApiApi api = new ImageEditingApiApi();

    /**
     * Background Removal
     *
     * Background Removal
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void backgroundRemovalTest() throws ApiException {
        BackgroundRemovalRequest backgroundRemovalRequest = null;
        api.backgroundRemoval(backgroundRemovalRequest);

        // TODO: test validations
    }
    /**
     * Blip Diffusion
     *
     * Blip Diffusion
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void blipDiffusionTest() throws ApiException {
        BlipDiffusionRequest blipDiffusionRequest = null;
        api.blipDiffusion(blipDiffusionRequest);

        // TODO: test validations
    }
    /**
     * Depth2Img
     *
     * Depth2Img
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void depth2imgTest() throws ApiException {
        Depth2imgRequest depth2imgRequest = null;
        api.depth2img(depth2imgRequest);

        // TODO: test validations
    }
    /**
     * Grounded Segment Image
     *
     * Grounded Segment Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void groundedSegmentImageTest() throws ApiException {
        GroundedSegmentImageRequest groundedSegmentImageRequest = null;
        api.groundedSegmentImage(groundedSegmentImageRequest);

        // TODO: test validations
    }
    /**
     * Image Mixer
     *
     * Image Mixer
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void imageMixerTest() throws ApiException {
        ImageMixerRequest imageMixerRequest = null;
        api.imageMixer(imageMixerRequest);

        // TODO: test validations
    }
    /**
     * Magic Mix
     *
     * Magic Mix
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void magicMixTest() throws ApiException {
        MagicMixRequest magicMixRequest = null;
        api.magicMix(magicMixRequest);

        // TODO: test validations
    }
    /**
     * Mixture Canvas
     *
     * Mixture Canvas
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mixtureCanvasTest() throws ApiException {
        MixtureCanvasRequest mixtureCanvasRequest = null;
        api.mixtureCanvas(mixtureCanvasRequest);

        // TODO: test validations
    }
    /**
     * Outpainting
     *
     * Outpainting
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void outpaintingTest() throws ApiException {
        OutpaintingRequest outpaintingRequest = null;
        api.outpainting(outpaintingRequest);

        // TODO: test validations
    }
    /**
     * Super Resolution
     *
     * Super Resolution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void superResolutionTest() throws ApiException {
        SuperResolutionRequest superResolutionRequest = null;
        api.superResolution(superResolutionRequest);

        // TODO: test validations
    }
}
