/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab;

import com.simiacryptus.api.java.ApiException;
import com.simiacryptus.api.java.modelslab.model.CheckNsfwImagesRequest;
import com.simiacryptus.api.java.modelslab.model.ControlnetRequest;
import com.simiacryptus.api.java.modelslab.model.FetchImageRequest;
import com.simiacryptus.api.java.modelslab.model.GetAllModels200Response;
import com.simiacryptus.api.java.modelslab.model.GetAllModelsRequest;
import com.simiacryptus.api.java.modelslab.model.Img2imgRequest;
import com.simiacryptus.api.java.modelslab.model.Inpainting1Request;
import com.simiacryptus.api.java.modelslab.model.LoadModels200Response;
import com.simiacryptus.api.java.modelslab.model.LoadModelsRequest;
import com.simiacryptus.api.java.modelslab.model.LoadVaeRequest;
import com.simiacryptus.api.java.modelslab.model.RestartServer200Response;
import com.simiacryptus.api.java.modelslab.model.SuperResolution1Request;
import com.simiacryptus.api.java.modelslab.model.SyncModelsRequest;
import com.simiacryptus.api.java.modelslab.model.SystemDetails200Response;
import com.simiacryptus.api.java.modelslab.model.SystemDetailsRequest;
import com.simiacryptus.api.java.modelslab.model.Text2VideoRequest;
import com.simiacryptus.api.java.modelslab.model.Text2imgRequest;
import com.simiacryptus.api.java.modelslab.model.UploadImageRequest;
import com.simiacryptus.api.java.modelslab.model.VerifyModel200Response;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EnterpriseApiApi
 */
@Ignore
public class EnterpriseApiApiTest {

    private final EnterpriseApiApi api = new EnterpriseApiApi();

    /**
     * Check NSFW Images
     *
     * Check NSFW Images
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void checkNsfwImagesTest() throws ApiException {
        CheckNsfwImagesRequest checkNsfwImagesRequest = null;
        api.checkNsfwImages(checkNsfwImagesRequest);

        // TODO: test validations
    }
    /**
     * Clear Cache
     *
     * Clear Cache
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearCacheTest() throws ApiException {
        SystemDetailsRequest systemDetailsRequest = null;
        api.clearCache(systemDetailsRequest);

        // TODO: test validations
    }
    /**
     * Controlnet
     *
     * Controlnet
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void controlnetTest() throws ApiException {
        ControlnetRequest controlnetRequest = null;
        api.controlnet(controlnetRequest);

        // TODO: test validations
    }
    /**
     * Delete Model
     *
     * Delete model on your server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteModelTest() throws ApiException {
        SystemDetailsRequest systemDetailsRequest = null;
        VerifyModel200Response response = api.deleteModel(systemDetailsRequest);

        // TODO: test validations
    }
    /**
     * Fetch Image
     *
     * Fetch Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void fetchImageTest() throws ApiException {
        FetchImageRequest fetchImageRequest = null;
        api.fetchImage(fetchImageRequest);

        // TODO: test validations
    }
    /**
     * Get all models
     *
     * Get list of all models on your server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllModelsTest() throws ApiException {
        GetAllModelsRequest getAllModelsRequest = null;
        GetAllModels200Response response = api.getAllModels(getAllModelsRequest);

        // TODO: test validations
    }
    /**
     * Get list of Schedulers
     *
     * Get list of Schedulers
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListOfSchedulersTest() throws ApiException {
        SystemDetailsRequest systemDetailsRequest = null;
        api.getListOfSchedulers(systemDetailsRequest);

        // TODO: test validations
    }
    /**
     * Img2Img
     *
     * Img2Img
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void img2imgTest() throws ApiException {
        Img2imgRequest img2imgRequest = null;
        api.img2img(img2imgRequest);

        // TODO: test validations
    }
    /**
     * Inpainting
     *
     * Inpainting
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void inpainting1Test() throws ApiException {
        Inpainting1Request inpainting1Request = null;
        api.inpainting1(inpainting1Request);

        // TODO: test validations
    }
    /**
     * Load Models
     *
     * Load model to your dedicated server,  1. **url** : url of huggingface model, .ckpt download link, or trained model from our dreambooth api 2. **model_id** : this is model_id model will be saved as, you can load model using this id to generate images. 3. **model_type**: &#x60;1. \&quot;huggingface\&quot; 2. \&quot;api_trained\&quot; 3. \&quot;custom_ckpt\&quot;&#x60; 4. **revision :** if model is &#x60;\&quot;fp16\&quot; or \&quot;fp32\&quot;&#x60; 5. **webhook** : webhook to receive response on model load events 6. **upcast_attention** : pass \&quot;yes\&quot; only when you are loading stable diffusion 2.1 model
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loadModelsTest() throws ApiException {
        LoadModelsRequest loadModelsRequest = null;
        LoadModels200Response response = api.loadModels(loadModelsRequest);

        // TODO: test validations
    }
    /**
     * Load Vae
     *
     * Load Vae
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loadVaeTest() throws ApiException {
        LoadVaeRequest loadVaeRequest = null;
        api.loadVae(loadVaeRequest);

        // TODO: test validations
    }
    /**
     * Restart Server
     *
     * Restart your dedicated server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void restartServerTest() throws ApiException {
        SystemDetailsRequest systemDetailsRequest = null;
        RestartServer200Response response = api.restartServer(systemDetailsRequest);

        // TODO: test validations
    }
    /**
     * Super Resolution
     *
     * Super Resolution
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void superResolution1Test() throws ApiException {
        SuperResolution1Request superResolution1Request = null;
        api.superResolution1(superResolution1Request);

        // TODO: test validations
    }
    /**
     * Sync Models
     *
     * Sync Models
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void syncModelsTest() throws ApiException {
        SyncModelsRequest syncModelsRequest = null;
        api.syncModels(syncModelsRequest);

        // TODO: test validations
    }
    /**
     * System Details
     *
     * Get details of your server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemDetailsTest() throws ApiException {
        SystemDetailsRequest systemDetailsRequest = null;
        SystemDetails200Response response = api.systemDetails(systemDetailsRequest);

        // TODO: test validations
    }
    /**
     * Text 2 Video
     *
     * Text 2 Video
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void text2VideoTest() throws ApiException {
        Text2VideoRequest text2VideoRequest = null;
        api.text2Video(text2VideoRequest);

        // TODO: test validations
    }
    /**
     * Text2Img
     *
     * Text2Img
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void text2imgTest() throws ApiException {
        Text2imgRequest text2imgRequest = null;
        api.text2img(text2imgRequest);

        // TODO: test validations
    }
    /**
     * Update S3 Details
     *
     * Update S3 details on server,  You need to pass below parameters to update S3 details  1. public_url : public url on which images can be accessiable, and make \&quot;generations\&quot; directory in it and append it, 2. region_name : S3 region name 3. endpoint_url : S3 endpoint URL 4. aws_access_key_id : your aws accesskey 5. aws_secret_access_key : secret key 6. image_directory: image directory inside s3 bucket where images will be stoed, make \&quot;generations\&quot; directory inside buckey and make sure its public, so you can access images using links
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateS3DetailsTest() throws ApiException {
        SystemDetailsRequest systemDetailsRequest = null;
        VerifyModel200Response response = api.updateS3Details(systemDetailsRequest);

        // TODO: test validations
    }
    /**
     * Update Server
     *
     * Update Server
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateServerTest() throws ApiException {
        SystemDetailsRequest systemDetailsRequest = null;
        api.updateServer(systemDetailsRequest);

        // TODO: test validations
    }
    /**
     * Upload Image
     *
     * Upload Image
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadImageTest() throws ApiException {
        UploadImageRequest uploadImageRequest = null;
        api.uploadImage(uploadImageRequest);

        // TODO: test validations
    }
    /**
     * Verify Model
     *
     * Verify is specific model exists
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyModelTest() throws ApiException {
        SystemDetailsRequest systemDetailsRequest = null;
        VerifyModel200Response response = api.verifyModel(systemDetailsRequest);

        // TODO: test validations
    }
}
