/*
 * ModelsLab AI API's
 * This is ModelsLab Stable Diffusion and Multiple AI APIs, here you can pass details to generate images using API, without needs of GPU locally.  You will need to have _**api key**_ to generate images, if you don't have it, get it from [https://modelslab.com](https://modelslab.com/)  Send Json post request with data and links, don't send files as raw format, send accessible links instead
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.simiacryptus.api.java.modelslab;

import com.simiacryptus.api.java.ApiException;
import com.simiacryptus.api.java.modelslab.model.BuyModel200Response;
import com.simiacryptus.api.java.modelslab.model.BuyModelRequest;
import com.simiacryptus.api.java.modelslab.model.DeleteImagesRequest;
import com.simiacryptus.api.java.modelslab.model.FetchQueuedImagesRequest;
import com.simiacryptus.api.java.modelslab.model.UploadBase64ImageAndCropItRequest;
import org.junit.Test;
import org.junit.Ignore;
import org.junit.Assert;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MiscApi
 */
@Ignore
public class MiscApiTest {

    private final MiscApi api = new MiscApi();

    /**
     * Buy Model
     *
     * Buy Model
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buyModelTest() throws ApiException {
        BuyModelRequest buyModelRequest = null;
        BuyModel200Response response = api.buyModel(buyModelRequest);

        // TODO: test validations
    }
    /**
     * Buy Subscription
     *
     * Buy Subscription
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void buySubscriptionTest() throws ApiException {
        BuyModelRequest buyModelRequest = null;
        BuyModel200Response response = api.buySubscription(buyModelRequest);

        // TODO: test validations
    }
    /**
     * Clear User Cache
     *
     * Clear User Cache
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void clearUserCacheTest() throws ApiException {
        FetchQueuedImagesRequest fetchQueuedImagesRequest = null;
        api.clearUserCache(fetchQueuedImagesRequest);

        // TODO: test validations
    }
    /**
     * Delete Images
     *
     * Delete Images
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteImagesTest() throws ApiException {
        DeleteImagesRequest deleteImagesRequest = null;
        api.deleteImages(deleteImagesRequest);

        // TODO: test validations
    }
    /**
     * Get list of all public models
     *
     * Get list of all public models
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getListOfAllPublicModelsTest() throws ApiException {
        FetchQueuedImagesRequest fetchQueuedImagesRequest = null;
        api.getListOfAllPublicModels(fetchQueuedImagesRequest);

        // TODO: test validations
    }
    /**
     * Get Trained Model List
     *
     * Get Trained Model List
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTrainedModelListTest() throws ApiException {
        FetchQueuedImagesRequest fetchQueuedImagesRequest = null;
        api.getTrainedModelList(fetchQueuedImagesRequest);

        // TODO: test validations
    }
    /**
     * Upload base64 image and crop it
     *
     * Upload base64 image and crop it
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadBase64ImageAndCropItTest() throws ApiException {
        UploadBase64ImageAndCropItRequest uploadBase64ImageAndCropItRequest = null;
        api.uploadBase64ImageAndCropIt(uploadBase64ImageAndCropItRequest);

        // TODO: test validations
    }
}
